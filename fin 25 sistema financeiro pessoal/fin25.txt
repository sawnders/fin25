<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador Financeiro Pessoal</title>
    <style>
        /* --- ESTILOS GERAIS E LAYOUT --- */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 10px;
            background-color: #f4f7f9;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: auto;
            background-color: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        h1 {
            color: #007bff;
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }
        
        /* --- ESTILOS DE COMPONENTES --- */
        .collapsible-header {
            background-color: #f0f0f0;
            color: #333;
            padding: 15px;
            cursor: pointer;
            border-radius: 6px;
            margin-top: 15px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #ddd;
            transition: background-color 0.2s;
        }
        
        .collapsible-header:hover {
            background-color: #e2e2e2;
        }

        .arrow {
            transition: transform 0.3s ease;
            font-size: 1.2em;
        }

        .collapsible-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease-out;
            padding: 0 15px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-top: none;
            border-radius: 0 0 6px 6px;
            margin-bottom: 20px;
        }
        
        .collapsible-content.expanded {
            padding: 15px;
            border-top: 1px solid #ddd;
        }

        label {
            display: block;
            margin-top: 10px;
            font-weight: 600;
        }

        input[type="date"], 
        input[type="text"], 
        input[type="number"], 
        select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .form-row {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .form-row > div {
            flex: 1;
            min-width: 200px;
        }
        
        /* --- BOTÕES --- */
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s, opacity 0.2s;
            white-space: nowrap; 
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #0056b3;
        }
        
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background-color: #a71d2a;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: #5a6268;
        }

        .btn-info {
            background-color: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background-color: #0c8a9f;
        }

        .btn-success {
            background-color: #28a745;
            color: white;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .btn-calc {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 100;
        }

        .btn-calc:hover {
            background-color: #0056b3;
        }
        
        .btn-calendar {
            position: fixed;
            bottom: 90px;
            right: 20px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #4285f4;
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 99;
        }

        .btn-calendar:hover {
            background-color: #3367d6;
        }

        .btn-group {
            margin-top: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        /* --- DASHBOARD --- */
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .dashboard-item {
            background-color: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            text-align: center;
            border: 1px solid #eee;
        }

        .dashboard-valor {
            font-size: 1.8em;
            font-weight: bold;
            margin: 5px 0 0;
            transition: color 0.3s, background-color 0.3s;
        }

        .soma-positiva {
            color: #28a745;
        }
        
        .soma-negativa {
            color: #dc3545;
        }
        
        .soma-neutra {
             color: #6c757d;
        }

        .dashboard-title {
            font-size: 0.9em;
            color: #666;
        }

        .valor-oculto {
            color: transparent !important;
            background-color: #ccc; 
            border-radius: 4px;
            height: 1.1em;
            display: inline-block; 
            min-width: 80px;
            max-width: 120px;
        }
        
        .privacidade-toggle {
            float: right;
            font-size: 1.2em;
            padding: 5px 10px;
        }

        /* --- RELATÓRIO E TABELA --- */
        .relatorio-filtros {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
            align-items: flex-end;
        }

        .relatorio-filtros > div {
            flex-basis: calc(50% - 10px); 
            min-width: 150px;
        }
        
        .relatorio-resumo {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #007bff;
            border-radius: 6px;
            background-color: #e9f5ff;
            display: flex;
            justify-content: space-around;
            font-weight: bold;
            flex-wrap: wrap;
        }

        .table-container {
            overflow-x: auto;
            margin-top: 15px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            min-width: 600px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            font-size: 0.9em;
        }

        th {
            background-color: #007bff;
            color: white;
            text-transform: uppercase;
            position: sticky;
            top: 0;
        }
        
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .status-vencido {
            background-color: #ffcccc; 
            color: #000000;
            font-weight: bold;
        }
        
        .status-pendente {
            background-color: #fff3cd; 
            color: #856404;
            font-weight: bold;
        }

        /* --- MODAL (CONFIGURAÇÕES E DETALHES) --- */
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0;
            top: 0;
            width: 100%; 
            height: 100%; 
            overflow: auto; 
            background-color: rgba(0,0,0,0.4); 
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto; 
            padding: 20px;
            border: 1px solid #888;
            width: 90%; 
            max-width: 700px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            position: relative;
        }

        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-btn:hover,
        .close-btn:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
        
        /* --- ESTILOS DE CATEGORIAS NO MODAL --- */
        .lista-categorias-ul {
            list-style: none;
            padding: 0;
            margin-top: 10px;
        }
        
        .lista-categorias-ul li {
            border-bottom: 1px dashed #eee;
            padding: 8px 0;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            flex-wrap: wrap;
        }
        
        .lista-categorias-ul li:last-child {
            border-bottom: none;
        }
        
        /* --- CALCULADORA --- */
        .calculadora-container {
            position: fixed;
            bottom: 160px;
            right: 20px;
            z-index: 98;
            display: none;
        }

        .calculadora {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 5px;
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        #displayCalc {
            grid-column: span 4;
            background-color: #222;
            color: white;
            padding: 15px;
            text-align: right;
            font-size: 1.5em;
            border-radius: 5px;
            margin-bottom: 5px;
            overflow: hidden; 
            white-space: nowrap; 
        }

        .calc-btn {
            padding: 15px;
            font-size: 1em;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            background-color: #e9e9e9;
            transition: background-color 0.1s;
        }

        .calc-btn:hover {
            background-color: #d1d1d1;
        }

        .operador {
            background-color: #ff9500;
            color: white;
        }

        .operador:hover {
            background-color: #e08500;
        }

        .clear {
            background-color: #ff3b30;
            color: white;
        }

        .clear:hover {
            background-color: #e02f23;
        }

        /* --- ÍCONE DE AJUDA --- */
        .help-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            font-weight: bold;
            cursor: pointer;
            margin-left: 10px;
            font-size: 14px;
        }

        .help-icon:hover {
            background-color: #0056b3;
        }
        
        /* --- AJUDA NO MODAL --- */
        .ajuda-container {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .ajuda-container h3 {
            color: #007bff;
            margin-top: 0;
        }

        .ajuda-container ul {
            padding-left: 20px;
        }

        .ajuda-container li {
            margin-bottom: 8px;
        }
        
        /* --- ESTILOS PARA STATUS DAS PARCELAS --- */
        .parcela-status-select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            font-size: 0.9em;
        }
        
        .parcela-row {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .parcela-info {
            flex-grow: 1;
            margin-right: 10px;
        }
        
        .parcela-actions {
            flex-shrink: 0;
        }
        
        /* --- RESPONSIVO --- */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            .form-row {
                flex-direction: column;
                gap: 0;
            }
            
            .relatorio-filtros > div {
                flex-basis: 100%;
            }
            
            .dashboard {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .dashboard-item:first-child {
                grid-column: span 2;
            }
            
            .btn-group {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
            }
            
            .modal-content {
                width: 95%;
                padding: 15px;
            }
            
            .calculadora {
                width: 280px;
            }
            
            .valor-oculto {
                min-width: 60px;
                max-width: 80px;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Gerenciador Financeiro Pessoal</h1>

        <div class="collapsible-header" onclick="toggleSection('dashboardContent')">
            Dashboard (Resumo) <button id="privacidadeToggle" class="btn btn-secondary privacidade-toggle" onclick="togglePrivacidade(event)">🔓</button> <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="dashboardContent">
            <div class="dashboard">
                <!-- Cartões maiores (primeira linha) -->
                <div class="dashboard-item" style="background-color: #ffe6e6;">
                    <div class="dashboard-title">Contas A Pagar</div>
                    <p id="aPagarCount" class="dashboard-valor soma-negativa">0</p>
                </div>
                <div class="dashboard-item" style="background-color: #fff3cd;">
                    <div class="dashboard-title">Pendente</div>
                    <p id="pendentesCount" class="dashboard-valor soma-neutra">0</p>
                </div>
                <div class="dashboard-item" style="background-color: #ffcccc;">
                    <div class="dashboard-title">Vencidas</div>
                    <p id="vencidasCount" class="dashboard-valor soma-negativa">0</p>
                </div>
                
                <!-- Cartões menores (segunda linha) -->
                <div class="dashboard-item" style="background-color: #e9f5ff; border: 2px solid #007bff;">
                    <div class="dashboard-title">Saldo Atual</div>
                    <p id="saldoAtual" class="dashboard-valor soma-neutra">R$ 0,00</p>
                </div>
                <div class="dashboard-item" style="background-color: #e6ffe6;">
                    <div class="dashboard-title">Contas a Receber</div>
                    <p id="aReceberCount" class="dashboard-valor soma-positiva">0</p>
                </div>
                <div class="dashboard-item">
                    <div class="dashboard-title">Receitas Quitadas no Mês</div>
                    <p id="receitasMes" class="dashboard-valor soma-positiva">R$ 0,00</p>
                </div>
                <div class="dashboard-item">
                    <div class="dashboard-title">Despesas Pagas no Mês</div>
                    <p id="despesasMes" class="dashboard-valor soma-negativa">R$ 0,00</p>
                </div>
            </div>
        </div>

        <div class="collapsible-header" onclick="toggleSection('transacaoContent')">
            Nova Transação <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="transacaoContent">
            <div class="form-row">
                <div>
                    <label for="dataTransacao">Data de Vencimento/Competência</label>
                    <input type="date" id="dataTransacao" required>
                </div>
                <div>
                    <label for="tipoTransacao">Tipo</label>
                    <select id="tipoTransacao" onchange="atualizarStatusPadrao(); carregarCategoriasESubcategorias()">
                        <option value="despesa">Despesa</option>
                        <option value="receita">Receita</option>
                    </select>
                </div>
                <div>
                    <label for="statusTransacao">Status</label>
                    <select id="statusTransacao"></select>
                </div>
            </div>

            <div class="form-row">
                <div>
                    <label for="valorTransacao">Valor Total (R$)</label>
                    <input type="number" id="valorTransacao" step="0.01" min="0.01" required>
                </div>
                <div>
                    <label for="parcelas">Número de Parcelas</label>
                    <input type="number" id="parcelas" min="1" value="1" required>
                </div>
            </div>
            
            <div class="form-row">
                 <div>
                    <label for="categoriaTransacao">Categoria <button class="btn btn-secondary" style="padding: 3px 6px; font-size: 0.8em; margin-left: 5px;" onclick="abrirModalCategorias()">+</button></label>
                    <select id="categoriaTransacao" onchange="carregarSubcategoriasPorCategoria()" required>
                        <option value="">Selecione uma categoria</option>
                    </select>
                </div>
                <div>
                    <label for="subcategoriaTransacao">Subcategoria (Opcional)</label>
                    <select id="subcategoriaTransacao">
                        <option value="">Selecione uma subcategoria</option>
                    </select>
                </div>
            </div>

            <label for="lojaTransacao">Loja/Origem</label>
            <input type="text" id="lojaTransacao" list="listaLojas" autocomplete="off">
            <datalist id="listaLojas"></datalist>

            <label for="descricaoTransacao">Descrição</label>
            <input type="text" id="descricaoTransacao" required>

            <div class="btn-group">
                <button class="btn btn-primary" onclick="salvarTransacao()">Salvar Transação</button>
                <button class="btn btn-secondary" onclick="limparFormulario()">Limpar</button>
            </div>
        </div>

        <div class="collapsible-header" onclick="toggleSection('relatorioContent')">
            Relatórios e Extrato <span class="help-icon" onclick="abrirModalAjuda()" title="Ajuda">i</span> <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="relatorioContent">
            <h2>Filtros</h2>
            <div class="relatorio-filtros">
                <div>
                    <label for="filtroPeriodo">Período</label>
                    <select id="filtroPeriodo" onchange="toggleDateFilters()">
                        <option value="mes">Mês Atual</option>
                        <option value="3meses">Últimos 3 Meses</option>
                        <option value="6meses">Últimos 6 Meses</option>
                        <option value="1ano">Último Ano</option>
                        <option value="personalizado">Personalizado</option>
                    </select>
                </div>
                <div id="filtroDataPersonalizada" style="display: none;">
                    <label for="dataInicio">De</label>
                    <input type="date" id="dataInicio">
                </div>
                <div id="filtroDataPersonalizada2" style="display: none;">
                    <label for="dataFim">Até</label>
                    <input type="date" id="dataFim">
                </div>
                <div>
                    <label for="filtroTipo">Tipo</label>
                    <select id="filtroTipo">
                        <option value="">Todos</option>
                        <option value="despesa">Despesa</option>
                        <option value="receita">Receita</option>
                    </select>
                </div>
                <div>
                    <label for="filtroCategoria">Categoria</label>
                    <select id="filtroCategoria">
                        <option value="">Todas</option>
                    </select>
                </div>
                <div>
                    <label for="filtroBusca">Busca (Desc/Loja)</label>
                    <input type="text" id="filtroBusca">
                </div>
            </div>
            
            <button class="btn btn-primary" onclick="gerarRelatorio()">Gerar Relatório</button>

            <div class="relatorio-resumo">
                <p>Contas a Pagar: <span id="contasAPagarRelatorio" class="soma-negativa">0</span></p>
                <p>Pendências: <span id="pendenciasRelatorio" class="soma-neutra">0</span></p>
                <p>Saldo Disponível: <span id="saldoDisponivelRelatorio" class="soma-neutra">R$ 0,00</span></p>
            </div>

            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Descrição</th>
                            <th>Tipo</th>
                            <th>Categoria</th>
                            <th>Subcategoria</th>
                            <th>Valor (R$)</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="tabelaRelatorioBody">
                        </tbody>
                </table>
            </div>
        </div>

        <div class="collapsible-header" onclick="toggleSection('configContent')">
            Configurações e Ajuda <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="configContent">
            <h3>Resetar Todos os Dados</h3>
            <p><strong>ATENÇÃO:</strong> Esta ação é irreversível e apagará todas as transações, categorias e lojas.</p>
            <input type="password" id="senhaReset" placeholder="Senha de Reset">
            <button class="btn btn-danger" onclick="resetarDados()">Confirmar Reset</button>
            
        </div>

    </div>

    <!-- Botão do Google Calendar -->
    <button class="btn-calendar" onclick="abrirGoogleCalendario()" title="Google Calendar">📅</button>
    
    <!-- Botão da Calculadora -->
    <button class="btn-calc" onclick="toggleCalculadora()">🔢</button>
    
    <!-- Container da Calculadora -->
    <div class="calculadora-container" id="calculadoraContainer">
        <div class="calculadora">
            <div id="displayCalc">0</div>
            <button class="calc-btn clear" onclick="limparCalc()">C</button>
            <button class="calc-btn clear" onclick="apagarCalc()">←</button>
            <button class="calc-btn operador" onclick="operadorCalc('/')">÷</button>
            <button class="calc-btn operador" onclick="operadorCalc('*')">×</button>
            <button class="calc-btn" onclick="digitoCalc('7')">7</button>
            <button class="calc-btn" onclick="digitoCalc('8')">8</button>
            <button class="calc-btn" onclick="digitoCalc('9')">9</button>
            <button class="calc-btn operador" onclick="operadorCalc('-')">-</button>
            <button class="calc-btn" onclick="digitoCalc('4')">4</button>
            <button class="calc-btn" onclick="digitoCalc('5')">5</button>
            <button class="calc-btn" onclick="digitoCalc('6')">6</button>
            <button class="calc-btn operador" onclick="operadorCalc('+')">+</button>
            <button class="calc-btn" onclick="digitoCalc('1')">1</button>
            <button class="calc-btn" onclick="digitoCalc('2')">2</button>
            <button class="calc-btn" onclick="digitoCalc('3')">3</button>
            <button class="calc-btn operador" onclick="igualCalc()">=</button>
            <button class="calc-btn" onclick="digitoCalc('0')">0</button>
            <button class="calc-btn" onclick="digitoCalc(',')">,</button>
        </div>
    </div>

    <div id="modalCategorias" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="fecharModalCategorias()">&times;</span>
            <h2>Gerenciar Categorias</h2>
            
            <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                <div style="flex: 1; min-width: 250px;">
                    <h3>Nova Categoria</h3>
                    <label for="modalTipo">Tipo:</label>
                    <select id="modalTipo" style="width: 100%;" onchange="carregarCategoriasModal()">
                        <option value="despesa">Despesa</option>
                        <option value="receita">Receita</option>
                    </select>
                    <label for="modalNovaCategoria">Nome da Categoria:</label>
                    <input type="text" id="modalNovaCategoria" placeholder="Ex: Alimentação, Salário">
                    <button class="btn btn-primary" onclick="cadastrarCategoriaModal()">Cadastrar Categoria</button>
                </div>
                
                <div style="flex: 1; min-width: 250px;">
                    <h3>Nova Subcategoria</h3>
                    <label for="modalSubCategoriaPai">Categoria Pai:</label>
                    <select id="modalSubCategoriaPai" style="width: 100%;">
                        <option value="">Selecione uma categoria</option>
                    </select>
                    
                    <label for="modalNovaSubcategoria">Nome da Subcategoria:</label>
                    <input type="text" id="modalNovaSubcategoria" placeholder="Ex: Supermercado, Restaurante">
                    <button class="btn btn-primary" onclick="cadastrarSubcategoriaModal()">Cadastrar Subcategoria</button>
                </div>
            </div>

            <hr style="margin-top: 20px;">

            <h3>Categorias Existentes (Clique em X para Excluir)</h3>
            <div id="categoriasDisplay">
                </div>
        </div>
    </div>

    <div id="modalDetalhesTransacao" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="fecharModalDetalhes()">&times;</span>
            <h2>Detalhes da Transação Original</h2>
            <div id="detalhesDisplay">
                </div>
        </div>
    </div>

    <div id="modalAjudaRelatorios" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="fecharModalAjuda()">&times;</span>
            <h2>Como usar os Relatórios e Pesquisas</h2>
            <div class="ajuda-container">
                <h3>Filtros Disponíveis</h3>
                <ul>
                    <li><strong>Período:</strong> Selecione o período desejado (Mês Atual, Últimos 3 Meses, etc.) ou defina um período personalizado</li>
                    <li><strong>Tipo:</strong> Filtre por "Despesa", "Receita" ou deixe "Todos" para ver ambos</li>
                    <li><strong>Categoria:</strong> Selecione uma categoria específica ou deixe "Todas"</li>
                    <li><strong>Busca:</strong> Pesquise por descrição ou loja/origem</li>
                </ul>
                
                <h3>Status das Transações</h3>
                <ul>
                    <li><strong>Pago/Recebido:</strong> Transações já quitadas</li>
                    <li><strong>A Pagar/A Receber:</strong> Transações pendentes de pagamento</li>
                    <li><strong>Pendente:</strong> Transações com status indefinido</li>
                    <li><strong>Vencido/Atrasado:</strong> Transações com data de vencimento passada e não quitadas (destacadas em vermelho)</li>
                </ul>
                
                <h3>Como Pesquisar</h3>
                <ul>
                    <li><strong>Para ver apenas transações pagas:</strong> Não há filtro direto, mas você pode identificar pelo status "Pago" ou "Recebido" na tabela</li>
                    <li><strong>Para ver apenas transações não pagas:</strong> Filtre por status "A Pagar", "A Receber" ou "Pendente"</li>
                    <li><strong>Para ver transações atrasadas:</strong> Elas aparecem destacadas em vermelho na tabela com status "VENCIDO/ATRASADO"</li>
                </ul>
                
                <h3>Novas Funcionalidades</h3>
                <ul>
                    <li><strong>Modificação de Status das Parcelas:</strong> Ao abrir os detalhes de uma transação, você pode modificar o status de cada parcela individualmente</li>
                    <li><strong>Período Personalizado:</strong> Se deixar as datas em branco no modo personalizado, o sistema pesquisará todas as transações</li>
                    <li><strong>Privacidade Aprimorada:</strong> O ícone de privacidade agora usa cadeado aberto/fechado e ocupa menos espaço</li>
                    <li><strong>Resumo do Relatório:</strong> Agora mostra contas a pagar, pendências e saldo disponível</li>
                </ul>
            </div>
        </div>
    </div>


<script>
    // --- VARIÁVEIS GLOBAIS E CONFIGURAÇÃO ---
    const PASS_RESET = "123456"; // Senha de reset 
    let isPrivacidadeAtiva = true; // Inicia ativado
    // Variáveis da calculadora
    let displayValue = '0';
    let primeiroOperando = null;
    let operadorPendente = null;
    let aguardandoSegundoOperando = false;
    
    // --- UTILS ---
    const formatarMoeda = (valor) => {
        if (!isFinite(valor) || valor === null) {
            return 'R$ 0,00';
        }
        return `R$ ${parseFloat(valor).toFixed(2).replace('.', ',').replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;
    };

    // --- FUNÇÕES DE ARMAZENAMENTO (LOCALSTORAGE) ---
    function getTransacoes() {
        return JSON.parse(localStorage.getItem('transacoes')) || [];
    }

    function setTransacoes(transacoes) {
        localStorage.setItem('transacoes', JSON.stringify(transacoes));
    }
    
    function getCategorias() {
        // Estrutura: { despesa: { 'Categoria X': {nome: 'Cat X', subcategorias: []} }, receita: {...} }
        const categorias = localStorage.getItem('categorias');
        if (!categorias) {
            // Inicializa com categorias padrão
            const categoriasPadrao = {
                despesa: {
                    'Alimentação': { nome: 'Alimentação', subcategorias: ['Supermercado', 'Restaurante'] },
                    'Transporte': { nome: 'Transporte', subcategorias: ['Combustível', 'Ônibus'] },
                    'Moradia': { nome: 'Moradia', subcategorias: ['Aluguel', 'Contas'] }
                },
                receita: {
                    'Salário': { nome: 'Salário', subcategorias: [] },
                    'Freelancer': { nome: 'Freelancer', subcategorias: [] }
                }
            };
            localStorage.setItem('categorias', JSON.stringify(categoriasPadrao));
            return categoriasPadrao;
        }
        return JSON.parse(categorias);
    }

    function setCategorias(categorias) {
        localStorage.setItem('categorias', JSON.stringify(categorias));
    }
    
    function getLojas() {
        return JSON.parse(localStorage.getItem('lojas')) || [];
    }

    function setLojas(lojas) {
        localStorage.setItem('lojas', JSON.stringify(lojas));
    }

    // --- FUNÇÕES DE USABILIDADE ---
    
    function atualizarStatusPadrao() {
        const tipo = document.getElementById('tipoTransacao').value;
        const statusSelect = document.getElementById('statusTransacao');
        
        statusSelect.innerHTML = '';
        
        if (tipo === 'despesa') {
            statusSelect.innerHTML = `
                <option value="A Pagar">A Pagar</option>
                <option value="Pendente">Pendente</option>
                <option value="Pago">Pago</option>
            `;
            statusSelect.value = 'A Pagar';
        } else {
            statusSelect.innerHTML = `
                <option value="A Receber">A Receber</option>
                <option value="Pendente">Pendente</option>
                <option value="Recebido">Recebido</option>
            `;
            statusSelect.value = 'A Receber';
        }
    }
    
    function toggleSection(contentId) {
        const content = document.getElementById(contentId);
        const header = content.previousElementSibling;
        const arrow = header.querySelector('.arrow');

        const isExpanded = content.classList.contains('expanded');

        // Fechar
        if (isExpanded) {
            content.style.maxHeight = content.scrollHeight + 'px'; // Força a transição a começar do tamanho atual
            setTimeout(() => {
                content.style.maxHeight = '0px';
                content.classList.remove('expanded');
                arrow.style.transform = 'rotate(0deg)';
            }, 10);
        } 
        // Abrir
        else {
            // Fechar outras seções antes de abrir (opcional, mas melhora a UX)
             document.querySelectorAll('.collapsible-content.expanded').forEach(otherContent => {
                 if(otherContent.id !== contentId) {
                     otherContent.style.maxHeight = '0px';
                     otherContent.classList.remove('expanded');
                     otherContent.previousElementSibling.querySelector('.arrow').style.transform = 'rotate(0deg)';
                 }
             });


            content.classList.add('expanded');
            content.style.maxHeight = content.scrollHeight + 'px'; 
            arrow.style.transform = 'rotate(180deg)';
            
            // Depois da transição, define max-height alto para permitir crescimento do conteúdo
            content.addEventListener('transitionend', function handler() {
                if (content.classList.contains('expanded')) {
                    content.style.maxHeight = '4000px'; 
                }
                content.removeEventListener('transitionend', handler);
            });
        }
    }
    
    function togglePrivacidade(event) {
        event.stopPropagation();
        isPrivacidadeAtiva = !isPrivacidadeAtiva;
        const toggleButton = document.getElementById('privacidadeToggle');
        const dashboardValues = document.querySelectorAll('.dashboard-valor');

        toggleButton.innerHTML = isPrivacidadeAtiva ? '🔓' : '🔒'; 
        
        dashboardValues.forEach(p => {
            p.classList.toggle('valor-oculto', isPrivacidadeAtiva);
        });
    }
    
    function toggleCalculadora() {
        const calcContainer = document.getElementById('calculadoraContainer');
        calcContainer.style.display = calcContainer.style.display === 'block' ? 'none' : 'block';
    }
    
    function abrirGoogleCalendario() {
        window.open('https://calendar.google.com', '_blank');
    }

    // --- FUNÇÕES DE MODAL DE AJUDA ---
    function abrirModalAjuda() {
        document.getElementById('modalAjudaRelatorios').style.display = 'block';
        event.stopPropagation(); // Impede que o clique no ícone abra/feche a seção
    }
    
    function fecharModalAjuda() {
        document.getElementById('modalAjudaRelatorios').style.display = 'none';
    }

    // --- FUNÇÕES DE CATEGORIAS E LOJAS ---
    
    function carregarLojas() {
        const lojas = getLojas();
        const datalist = document.getElementById('listaLojas');
        datalist.innerHTML = '';
        lojas.sort().forEach(loja => {
            const option = document.createElement('option');
            option.value = loja;
            datalist.appendChild(option);
        });
    }
    
    function carregarCategoriasESubcategorias() {
        const categorias = getCategorias();
        const tipoSelecionado = document.getElementById('tipoTransacao').value; 
        
        const selectCatTransacao = document.getElementById('categoriaTransacao');
        const selectCatFiltro = document.getElementById('filtroCategoria');
        
        // Limpa selects
        selectCatTransacao.innerHTML = '<option value="">Selecione uma categoria</option>';
        selectCatFiltro.innerHTML = '<option value="">Todas</option>';

        // 1. Carrega categorias do tipo selecionado (para a Nova Transação)
        const categoriasDoTipo = categorias[tipoSelecionado] || {};
        const nomesCategoriasDoTipo = Object.keys(categoriasDoTipo).sort(); 
        
        nomesCategoriasDoTipo.forEach(catName => {
            const option = document.createElement('option');
            option.value = catName;
            option.textContent = catName;
            selectCatTransacao.appendChild(option);
        });

        // 2. Carrega TODAS as categorias (para o Filtro de Relatórios)
        const todasCategorias = new Set();
        for (const tipo in categorias) {
            for (const catName in categorias[tipo]) {
                todasCategorias.add(catName);
            }
        }
        
        // Adiciona as categorias ao select de Filtro
        Array.from(todasCategorias).sort().forEach(cat => {
            const optionFiltro = document.createElement('option');
            optionFiltro.value = cat;
            optionFiltro.textContent = cat;
            selectCatFiltro.appendChild(optionFiltro);
        });
        
        carregarSubcategoriasPorCategoria();
    }

    function carregarSubcategoriasPorCategoria() {
        const categorias = getCategorias();
        const tipo = document.getElementById('tipoTransacao').value;
        const categoriaSelecionada = document.getElementById('categoriaTransacao').value.trim(); 
        const selectSub = document.getElementById('subcategoriaTransacao');
        
        selectSub.innerHTML = '<option value="">Selecione uma subcategoria</option>';
        
        if (!categoriaSelecionada) return;
        
        // Assegura que estamos pegando a categoria correta para o tipo selecionado
        const categoriaObj = categorias[tipo] && categorias[tipo][categoriaSelecionada];

        if (categoriaObj && categoriaObj.subcategorias) {
            categoriaObj.subcategorias.slice().sort().forEach(sub => {
                const option = document.createElement('option');
                option.value = sub;
                option.textContent = sub;
                selectSub.appendChild(option);
            });
        }
    }
    
    function carregarCategoriasModal() {
        const tipo = document.getElementById('modalTipo').value;
        const categorias = getCategorias();
        const selectCatModal = document.getElementById('modalSubCategoriaPai');
        
        selectCatModal.innerHTML = '<option value="">Selecione uma categoria</option>';
        
        const categoriasDoTipo = categorias[tipo] || {};
        const nomesCategoriasDoTipo = Object.keys(categoriasDoTipo).sort(); 
        
        nomesCategoriasDoTipo.forEach(catName => {
            const option = document.createElement('option');
            option.value = catName;
            option.textContent = catName;
            selectCatModal.appendChild(option);
        });
    }

    // --- FUNÇÕES DE CRUD DE CATEGORIAS (APENAS NO MODAL) ---

    function abrirModalCategorias() {
        document.getElementById('modalCategorias').style.display = 'block';
        carregarCategoriasModal(); // Carrega categorias do modal
        exibirCategoriasParaGerenciamento(); 
    }

    function fecharModalCategorias() {
        document.getElementById('modalCategorias').style.display = 'none';
        carregarCategoriasESubcategorias(); // Recarrega os selects da Transação após o gerenciamento
    }
    
    function cadastrarCategoriaModal() {
        const tipo = document.getElementById('modalTipo').value;
        const categoriaInput = document.getElementById('modalNovaCategoria');
        const categoriaNome = categoriaInput.value.trim();
        
        if (!categoriaNome) {
            alert('Erro: Digite o nome da nova Categoria.');
            return;
        }

        if (!confirm(`Deseja cadastrar a categoria "${categoriaNome}" para ${tipo}?`)) {
            return;
        }

        let categorias = getCategorias();
        
        // Garante que o tipo existe
        if (!categorias[tipo]) {
            categorias[tipo] = {};
        }

        // Verifica se a categoria já existe
        if (categorias[tipo][categoriaNome]) {
            alert(`ATENÇÃO: Categoria '${categoriaNome}' (${tipo}) já existe.`);
            return;
        }

        // Adiciona a nova categoria
        categorias[tipo][categoriaNome] = { 
            nome: categoriaNome, 
            subcategorias: [] 
        };
        
        // Salva no localStorage
        setCategorias(categorias);
        
        // Limpa o input
        categoriaInput.value = '';
        
        // Atualiza as interfaces
        carregarCategoriasModal();
        exibirCategoriasParaGerenciamento();
        
        // Se o tipo selecionado no formulário for o mesmo, atualiza também
        if (document.getElementById('tipoTransacao').value === tipo) {
            carregarCategoriasESubcategorias();
        }
        
        alert(`SUCESSO: Categoria '${categoriaNome}' (${tipo}) cadastrada!`);
    }
    
    function cadastrarSubcategoriaModal() {
        const tipo = document.getElementById('modalTipo').value;
        const categoriaNome = document.getElementById('modalSubCategoriaPai').value.trim();
        const subInput = document.getElementById('modalNovaSubcategoria');
        const subNome = subInput.value.trim();

        if (!categoriaNome || !subNome) {
            alert('Erro: Selecione uma Categoria existente (Categoria Pai) e digite o nome da Subcategoria.');
            return;
        }

        if (!confirm(`Deseja cadastrar a subcategoria "${subNome}" para a categoria "${categoriaNome}"?`)) {
            return;
        }

        let categorias = getCategorias();
        
        // Verifica se a categoria existe
        if (!categorias[tipo] || !categorias[tipo][categoriaNome]) {
            alert(`Erro: Categoria Pai '${categoriaNome}' não encontrada para o tipo ${tipo}.`);
            return;
        }
        
        const categoria = categorias[tipo][categoriaNome];

        // Verifica se a subcategoria já existe
        if (categoria.subcategorias.includes(subNome)) {
            alert(`ATENÇÃO: Subcategoria '${subNome}' já existe em '${categoriaNome}'.`);
            return;
        }

        // Adiciona a nova subcategoria
        categoria.subcategorias.push(subNome);
        categoria.subcategorias.sort(); 
        
        // Salva no localStorage
        setCategorias(categorias);
        
        // Limpa os inputs
        subInput.value = '';
        document.getElementById('modalSubCategoriaPai').value = '';
        
        // Atualiza as interfaces
        exibirCategoriasParaGerenciamento();
        
        // Se a categoria selecionada no formulário for a mesma, atualiza também
        if (document.getElementById('categoriaTransacao').value === categoriaNome && 
            document.getElementById('tipoTransacao').value === tipo) {
            carregarSubcategoriasPorCategoria();
        }
        
        alert(`SUCESSO: Subcategoria '${subNome}' adicionada à '${categoriaNome}' (${tipo}).`);
    }

    function exibirCategoriasParaGerenciamento() {
        const categorias = getCategorias();
        const display = document.getElementById('categoriasDisplay');
        display.innerHTML = '';

        const tipos = { despesa: 'Despesas', receita: 'Receitas' };

        for (const tipo in categorias) {
            const tipoDiv = document.createElement('div');
            tipoDiv.innerHTML = `<h3 style="margin-bottom: 0; color: ${tipo === 'despesa' ? '#dc3545' : '#28a745'}">${tipos[tipo]}</h3>`;
            display.appendChild(tipoDiv);

            const listaCats = categorias[tipo];
            const ul = document.createElement('ul');
            ul.classList.add('lista-categorias-ul');
            
            // Pega os nomes das categorias e ordena
            const nomesCategorias = Object.keys(listaCats).sort();

            nomesCategorias.forEach(catNome => {
                const catObj = listaCats[catNome];
                const li = document.createElement('li');
                
                const subcategoriasOrdenadas = catObj.subcategorias.slice().sort(); 
                
                let subHTML = '';
                if (subcategoriasOrdenadas.length > 0) {
                    subHTML = subcategoriasOrdenadas.map(sub => 
                        `<span style="white-space: nowrap;">${sub} <button class="btn btn-danger" style="padding: 3px 6px; font-size: 0.7em;" onclick="excluirSubcategoria('${catNome}', '${sub}', '${tipo}')">X</button></span>`
                    ).join(' | ');
                } else {
                    subHTML = 'Nenhuma Subcategoria';
                }
                
                li.innerHTML = `
                    <div style="flex-grow: 1; margin-right: 15px;">
                        <strong>${catNome}</strong>
                        <div style="font-size: 0.9em; margin-top: 5px; color: #555; max-height: 50px; overflow: auto; padding-right: 10px;">${subHTML}</div>
                    </div>
                    <button class="btn btn-danger" style="flex-shrink: 0;" onclick="excluirCategoria('${catNome}', '${tipo}')">Excluir Categoria</button>
                `;
                ul.appendChild(li);
            });
            
            if (nomesCategorias.length === 0) {
                ul.innerHTML = '<li>Nenhuma categoria cadastrada para este tipo.</li>';
            }
            
            display.appendChild(ul);
        }
    }
    
    function excluirCategoria(nome, tipo) {
        if (!confirm(`Tem certeza que deseja excluir a categoria '${nome}' (${tipo}) e todas as suas subcategorias?`)) {
            return;
        }
        
        const categorias = getCategorias();
        if (categorias[tipo] && categorias[tipo][nome]) {
             delete categorias[tipo][nome];
             setCategorias(categorias);
             exibirCategoriasParaGerenciamento(); // Recarrega a lista do modal
             carregarCategoriasESubcategorias(); // Atualiza selects de Transação
             alert(`Categoria '${nome}' excluída.`);
        }
    }

    function excluirSubcategoria(catNome, subNome, tipo) {
        if (!confirm(`Tem certeza que deseja excluir a subcategoria '${subNome}' de '${catNome}'?`)) {
            return;
        }
        
        const categorias = getCategorias();
        const categoria = categorias[tipo] && categorias[tipo][catNome];

        if (categoria) {
            const subcategorias = categoria.subcategorias;
            const index = subcategorias.indexOf(subNome);
            if (index > -1) {
                subcategorias.splice(index, 1);
                setCategorias(categorias);
                exibirCategoriasParaGerenciamento(); // Recarrega a lista do modal
                carregarCategoriasESubcategorias(); // Atualiza selects de Transação
                alert(`Subcategoria '${subNome}' excluída.`);
            }
        }
    }

    // --- FUNÇÕES DE TRANSAÇÃO ---
    
    function salvarTransacao() {
        if (!confirm('Deseja realmente salvar esta(s) transação(ões)?')) {
            return;
        }

        const data = document.getElementById('dataTransacao').value;
        const tipo = document.getElementById('tipoTransacao').value;
        const categoria = document.getElementById('categoriaTransacao').value.trim();
        const subcategoria = document.getElementById('subcategoriaTransacao').value.trim();
        const lojaTransacao = document.getElementById('lojaTransacao').value.trim();
        const descricaoTransacao = document.getElementById('descricaoTransacao').value.trim();
        const valorStr = document.getElementById('valorTransacao').value.replace(',', '.');
        const parcelas = parseInt(document.getElementById('parcelas').value);
        const status = document.getElementById('statusTransacao').value;

        if (!data || !valorStr || !categoria || !tipo || !descricaoTransacao || isNaN(parcelas) || parcelas < 1) {
            alert('Por favor, preencha Data, Valor, Categoria, Tipo, Descrição e Número de Parcelas.');
            return;
        }
        
        const valor = parseFloat(valorStr);

        if (isNaN(valor) || valor <= 0) {
            alert('O valor deve ser um número positivo.');
            return;
        }

        // Validação da Categoria 
        const categoriasExistentes = getCategorias()[tipo];
        if (!categoriasExistentes || !categoriasExistentes[categoria]) {
             alert(`A categoria '${categoria}' não foi encontrada para o tipo ${tipo}. Por favor, use o botão '+' ao lado do campo Categoria para ir em Configurações e cadastrá-la.`);
             return;
        }

        let transacoes = getTransacoes();
        
        // Cadastro implícito de Loja/Estabelecimento
        if(lojaTransacao) {
            let lojas = getLojas();
            if (!lojas.includes(lojaTransacao)) {
                lojas.push(lojaTransacao);
                setLojas(lojas);
            }
        }

        const valorParcela = valor / parcelas;
        const idOriginal = Date.now(); 
        
        // Geração de Parcelas
        for (let i = 0; i < parcelas; i++) {
            const dataInicial = new Date(data + 'T00:00:00');
            const dataParcela = new Date(dataInicial.setMonth(dataInicial.getMonth() + i));

            const novaTransacao = {
                id: idOriginal + i,
                idOriginal: idOriginal,
                data: dataParcela.toISOString().split('T')[0],
                tipo: tipo,
                categoria: categoria,
                subcategoria: subcategoria || null,
                loja: lojaTransacao || null,
                descricao: descricaoTransacao,
                valor: valorParcela,
                status: status,
                parcela: i + 1,
                totalParcelas: parcelas
            };

            transacoes.push(novaTransacao);
        }

        setTransacoes(transacoes);
        limparFormulario();
        atualizarDashboard();
        alert('Transação(ões) salva(s) com sucesso!');
    }
    
    function limparFormulario() {
        document.getElementById('dataTransacao').value = '';
        document.getElementById('valorTransacao').value = '';
        document.getElementById('parcelas').value = '1';
        document.getElementById('lojaTransacao').value = '';
        document.getElementById('descricaoTransacao').value = '';
        document.getElementById('subcategoriaTransacao').innerHTML = '<option value="">Selecione uma subcategoria</option>';
        document.getElementById('categoriaTransacao').value = '';
        atualizarStatusPadrao();
    }

    // --- FUNÇÕES DE RELATÓRIO ---
    
    function toggleDateFilters() {
        const periodo = document.getElementById('filtroPeriodo').value;
        const filtroDataPersonalizada = document.getElementById('filtroDataPersonalizada');
        const filtroDataPersonalizada2 = document.getElementById('filtroDataPersonalizada2');
        
        if (periodo === 'personalizado') {
            filtroDataPersonalizada.style.display = 'block';
            filtroDataPersonalizada2.style.display = 'block';
        } else {
            filtroDataPersonalizada.style.display = 'none';
            filtroDataPersonalizada2.style.display = 'none';
        }
    }
    
    function gerarRelatorio() {
        const periodo = document.getElementById('filtroPeriodo').value;
        const tipo = document.getElementById('filtroTipo').value;
        const categoria = document.getElementById('filtroCategoria').value;
        const busca = document.getElementById('filtroBusca').value.toLowerCase().trim();
        
        let dataInicio, dataFim;
        
        // Define o período de datas com base na seleção
        const hoje = new Date();
        const primeiroDiaMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
        
        switch (periodo) {
            case 'mes':
                dataInicio = primeiroDiaMes;
                dataFim = new Date(hoje.getFullYear(), hoje.getMonth() + 1, 0);
                break;
            case '3meses':
                dataInicio = new Date(hoje.getFullYear(), hoje.getMonth() - 2, 1);
                dataFim = new Date(hoje.getFullYear(), hoje.getMonth() + 1, 0);
                break;
            case '6meses':
                dataInicio = new Date(hoje.getFullYear(), hoje.getMonth() - 5, 1);
                dataFim = new Date(hoje.getFullYear(), hoje.getMonth() + 1, 0);
                break;
            case '1ano':
                dataInicio = new Date(hoje.getFullYear() - 1, hoje.getMonth(), 1);
                dataFim = new Date(hoje.getFullYear(), hoje.getMonth() + 1, 0);
                break;
            case 'personalizado':
                const dataInicioInput = document.getElementById('dataInicio').value;
                const dataFimInput = document.getElementById('dataFim').value;
                
                // Se as datas estiverem vazias, pesquisar todas as transações
                if (!dataInicioInput && !dataFimInput) {
                    dataInicio = new Date(1900, 0, 1); // Data muito antiga
                    dataFim = new Date(2100, 11, 31); // Data muito futura
                } else {
                    dataInicio = new Date(dataInicioInput + 'T00:00:00');
                    dataFim = new Date(dataFimInput + 'T23:59:59');
                    
                    if (isNaN(dataInicio.getTime()) || isNaN(dataFim.getTime())) {
                        alert('Por favor, selecione datas válidas para o período personalizado.');
                        return;
                    }
                }
                break;
        }
        
        // Converte as datas para formato YYYY-MM-DD para comparação
        const dataInicioStr = dataInicio.toISOString().split('T')[0];
        const dataFimStr = dataFim.toISOString().split('T')[0];
        
        // Obtém todas as transações
        const todasTransacoes = getTransacoes();
        
        // Filtra as transações com base nos critérios
        const transacoesFiltradas = todasTransacoes.filter(t => {
            // Verifica se a transação está dentro do período
            if (t.data < dataInicioStr || t.data > dataFimStr) {
                return false;
            }
            
            // Verifica o tipo
            if (tipo && t.tipo !== tipo) {
                return false;
            }
            
            // Verifica a categoria
            if (categoria && t.categoria !== categoria) {
                return false;
            }
            
            // Verifica a busca (descrição ou loja)
            if (busca && 
                !t.descricao.toLowerCase().includes(busca) && 
                !(t.loja && t.loja.toLowerCase().includes(busca))) {
                return false;
            }
            
            return true;
        });
        
        // Ordena as transações por data (mais recentes primeiro)
        transacoesFiltradas.sort((a, b) => new Date(b.data) - new Date(a.data));
        
        // Calcula os totais para o resumo do relatório
        let contasAPagar = 0;
        let pendencias = 0;
        let saldoDisponivel = 0;
        
        // Calcula o saldo disponível (todas as transações quitadas)
        todasTransacoes.forEach(t => {
            if (t.status === 'Pago' || t.status === 'Recebido') {
                if (t.tipo === 'receita') {
                    saldoDisponivel += t.valor;
                } else {
                    saldoDisponivel -= t.valor;
                }
            }
        });
        
        // Calcula contas a pagar e pendências (apenas das transações filtradas)
        transacoesFiltradas.forEach(t => {
            if (t.tipo === 'despesa' && t.status === 'A Pagar') {
                contasAPagar++;
            }
            
            if (t.status === 'Pendente') {
                pendencias++;
            }
        });
        
        // Atualiza o resumo do relatório
        document.getElementById('contasAPagarRelatorio').textContent = contasAPagar;
        document.getElementById('pendenciasRelatorio').textContent = pendencias;
        document.getElementById('saldoDisponivelRelatorio').textContent = formatarMoeda(saldoDisponivel);
        
        // Atualiza a classe do saldo disponível
        const saldoElement = document.getElementById('saldoDisponivelRelatorio');
        saldoElement.classList.remove('soma-positiva', 'soma-negativa', 'soma-neutra');
        if (saldoDisponivel > 0) {
            saldoElement.classList.add('soma-positiva');
        } else if (saldoDisponivel < 0) {
            saldoElement.classList.add('soma-negativa');
        } else {
            saldoElement.classList.add('soma-neutra');
        }
        
        // Atualiza a tabela
        const tbody = document.getElementById('tabelaRelatorioBody');
        tbody.innerHTML = '';
        
        if (transacoesFiltradas.length === 0) {
            const tr = document.createElement('tr');
            tr.innerHTML = '<td colspan="8" style="text-align: center;">Nenhuma transação encontrada com os filtros selecionados.</td>';
            tbody.appendChild(tr);
            return;
        }
        
        transacoesFiltradas.forEach(t => {
            const tr = document.createElement('tr');
            
            // Verifica se a transação está vencida
            const hoje = new Date();
            hoje.setHours(0, 0, 0, 0);
            const dataVencimento = new Date(t.data + 'T00:00:00');
            const isVencida = dataVencimento < hoje && 
                             ((t.tipo === 'despesa' && t.status !== 'Pago') || 
                              (t.tipo === 'receita' && t.status !== 'Recebido'));
            
            if (isVencida) {
                tr.classList.add('status-vencido');
            } else if (t.status === 'Pendente') {
                tr.classList.add('status-pendente');
            }
            
            // Formata a descrição para incluir informações de parcelamento
            let descricaoFormatada = t.descricao;
            if (t.totalParcelas > 1) {
                descricaoFormatada += ` (${t.parcela}/${t.totalParcelas})`;
            }
            
            tr.innerHTML = `
                <td>${t.data.split('-').reverse().join('/')}</td>
                <td>${descricaoFormatada}</td>
                <td>${t.tipo === 'despesa' ? 'Despesa' : 'Receita'}</td>
                <td>${t.categoria}</td>
                <td>${t.subcategoria || '-'}</td>
                <td>${formatarMoeda(t.valor)}</td>
                <td>${t.status}${isVencida ? ' (Vencido)' : ''}</td>
                <td>
                    <button class="btn btn-info" style="padding: 3px 6px; font-size: 0.8em; margin-right: 5px;" onclick="verDetalhesTransacao(${t.idOriginal})">Detalhes</button>
                    <button class="btn btn-danger" style="padding: 3px 6px; font-size: 0.8em;" onclick="excluirTransacao(${t.id})">Excluir</button>
                </td>
            `;
            
            tbody.appendChild(tr);
        });
    }
    
    function verDetalhesTransacao(idOriginal) {
        const transacoes = getTransacoes();
        const transacoesOriginais = transacoes.filter(t => t.idOriginal === idOriginal);
        
        if (transacoesOriginais.length === 0) {
            alert('Transação não encontrada.');
            return;
        }
        
        const display = document.getElementById('detalhesDisplay');
        display.innerHTML = '';
        
        const t = transacoesOriginais[0]; // Pega a primeira parcela como referência
        
        let html = `
            <div class="form-row">
                <div>
                    <label><strong>Tipo:</strong></label>
                    <p>${t.tipo === 'despesa' ? 'Despesa' : 'Receita'}</p>
                </div>
                <div>
                    <label><strong>Categoria:</strong></label>
                    <p>${t.categoria}</p>
                </div>
                <div>
                    <label><strong>Subcategoria:</strong></label>
                    <p>${t.subcategoria || '-'}</p>
                </div>
            </div>
            
            <div class="form-row">
                <div>
                    <label><strong>Loja/Origem:</strong></label>
                    <p>${t.loja || '-'}</p>
                </div>
                <div>
                    <label><strong>Descrição:</strong></label>
                    <p>${t.descricao}</p>
                </div>
                <div>
                    <label><strong>Valor Total:</strong></label>
                    <p>${formatarMoeda(t.valor * t.totalParcelas)}</p>
                </div>
            </div>
            
            <div class="form-row">
                <div>
                    <label><strong>Número de Parcelas:</strong></label>
                    <p>${t.totalParcelas}</p>
                </div>
                <div>
                    <label><strong>Valor por Parcela:</strong></label>
                    <p>${formatarMoeda(t.valor)}</p>
                </div>
            </div>
            
            <h3>Parcelas</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Parcela</th>
                            <th>Data de Vencimento</th>
                            <th>Valor</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        transacoesOriginais.forEach(parcela => {
            // Verifica se a parcela está vencida
            const hoje = new Date();
            hoje.setHours(0, 0, 0, 0);
            const dataVencimento = new Date(parcela.data + 'T00:00:00');
            const isVencida = dataVencimento < hoje && 
                             ((parcela.tipo === 'despesa' && parcela.status !== 'Pago') || 
                              (parcela.tipo === 'receita' && parcela.status !== 'Recebido'));
            
            html += `
                <tr ${isVencida ? 'class="status-vencido"' : ''}>
                    <td>${parcela.parcela}/${parcela.totalParcelas}</td>
                    <td>${parcela.data.split('-').reverse().join('/')}</td>
                    <td>${formatarMoeda(parcela.valor)}</td>
                    <td>${parcela.status}${isVencida ? ' (Vencido)' : ''}</td>
                    <td>
                        <select class="parcela-status-select" onchange="atualizarStatusParcela(${parcela.id}, this.value)">
            `;
            
            // Adiciona as opções de status conforme o tipo
            if (parcela.tipo === 'despesa') {
                html += `
                    <option value="A Pagar" ${parcela.status === 'A Pagar' ? 'selected' : ''}>A Pagar</option>
                    <option value="Pendente" ${parcela.status === 'Pendente' ? 'selected' : ''}>Pendente</option>
                    <option value="Pago" ${parcela.status === 'Pago' ? 'selected' : ''}>Pago</option>
                `;
            } else {
                html += `
                    <option value="A Receber" ${parcela.status === 'A Receber' ? 'selected' : ''}>A Receber</option>
                    <option value="Pendente" ${parcela.status === 'Pendente' ? 'selected' : ''}>Pendente</option>
                    <option value="Recebido" ${parcela.status === 'Recebido' ? 'selected' : ''}>Recebido</option>
                `;
            }
            
            html += `
                        </select>
                    </td>
                </tr>
            `;
        });
        
        html += `
                    </tbody>
                </table>
            </div>
        `;
        
        display.innerHTML = html;
        document.getElementById('modalDetalhesTransacao').style.display = 'block';
    }
    
    function atualizarStatusParcela(parcelaId, novoStatus) {
        if (!confirm('Deseja realmente alterar o status desta parcela?')) {
            // Recarrega os detalhes para manter o status anterior
            const transacoes = getTransacoes();
            const parcela = transacoes.find(t => t.id === parcelaId);
            if (parcela) {
                verDetalhesTransacao(parcela.idOriginal);
            }
            return;
        }
        
        let transacoes = getTransacoes();
        const parcelaIndex = transacoes.findIndex(t => t.id === parcelaId);
        
        if (parcelaIndex !== -1) {
            transacoes[parcelaIndex].status = novoStatus;
            setTransacoes(transacoes);
            
            // Atualiza o dashboard e relatórios
            atualizarDashboard();
            
            // Se o relatório estiver aberto, atualiza-o
            if (document.getElementById('relatorioContent').classList.contains('expanded')) {
                gerarRelatorio();
            }
            
            // Recarrega os detalhes da transação
            verDetalhesTransacao(transacoes[parcelaIndex].idOriginal);
            
            alert('Status da parcela atualizado com sucesso!');
        }
    }
    
    function fecharModalDetalhes() {
        document.getElementById('modalDetalhesTransacao').style.display = 'none';
    }
    
    function excluirTransacao(id) {
        if (!confirm('Tem certeza que deseja excluir esta transação?')) {
            return;
        }
        
        let transacoes = getTransacoes();
        transacoes = transacoes.filter(t => t.id !== id);
        setTransacoes(transacoes);
        
        // Se a transação excluída era a última parcela, remove também a referência ao idOriginal
        const transacoesRestantes = transacoes.filter(t => t.idOriginal === id);
        if (transacoesRestantes.length === 0) {
            // Não há mais parcelas, nada mais a fazer
        }
        
        atualizarDashboard();
        
        // Se o relatório estiver aberto, atualiza-o
        if (document.getElementById('relatorioContent').classList.contains('expanded')) {
            gerarRelatorio();
        }
        
        alert('Transação excluída com sucesso!');
    }

    // --- FUNÇÕES DE DASHBOARD ---
    
    function atualizarDashboard() {
        const transacoes = getTransacoes();
        const hoje = new Date();
        const primeiroDiaMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
        const ultimoDiaMes = new Date(hoje.getFullYear(), hoje.getMonth() + 1, 0);
        
        // Formata as datas para comparação
        const hojeStr = hoje.toISOString().split('T')[0];
        const primeiroDiaMesStr = primeiroDiaMes.toISOString().split('T')[0];
        const ultimoDiaMesStr = ultimoDiaMes.toISOString().split('T')[0];
        
        // Inicializa os contadores
        let saldoAtual = 0;
        let receitasMes = 0;
        let despesasMes = 0;
        let aPagarCount = 0;
        let aReceberCount = 0;
        let pendentesCount = 0;
        let pagosRecebidosCount = 0;
        let vencidasCount = 0;
        
        // Itera sobre as transações para calcular os valores
        transacoes.forEach(t => {
            // Saldo atual (apenas transações quitadas)
            if (t.status === 'Pago' || t.status === 'Recebido') {
                if (t.tipo === 'receita') {
                    saldoAtual += t.valor;
                } else {
                    saldoAtual -= t.valor;
                }
                pagosRecebidosCount++;
            }
            
            // Receitas e despesas do mês (apenas quitadas)
            if (t.data >= primeiroDiaMesStr && t.data <= ultimoDiaMesStr) {
                if (t.tipo === 'receita' && t.status === 'Recebido') {
                    receitasMes += t.valor;
                } else if (t.tipo === 'despesa' && t.status === 'Pago') {
                    despesasMes += t.valor;
                }
            }
            
            // Contas a pagar e a receber
            if (t.tipo === 'despesa' && t.status === 'A Pagar') {
                aPagarCount++;
            } else if (t.tipo === 'receita' && t.status === 'A Receber') {
                aReceberCount++;
            }
            
            // Pendentes
            if (t.status === 'Pendente') {
                pendentesCount++;
            }
            
            // Vencidas
            if (t.data < hojeStr) {
                if ((t.tipo === 'despesa' && t.status !== 'Pago') || 
                    (t.tipo === 'receita' && t.status !== 'Recebido')) {
                    vencidasCount++;
                }
            }
        });
        
        // Atualiza os valores no dashboard
        document.getElementById('saldoAtual').textContent = formatarMoeda(saldoAtual);
        document.getElementById('receitasMes').textContent = formatarMoeda(receitasMes);
        document.getElementById('despesasMes').textContent = formatarMoeda(despesasMes);
        document.getElementById('aPagarCount').textContent = aPagarCount;
        document.getElementById('aReceberCount').textContent = aReceberCount;
        document.getElementById('pendentesCount').textContent = pendentesCount;
        document.getElementById('pagosRecebidosCount').textContent = pagosRecebidosCount;
        document.getElementById('vencidasCount').textContent = vencidasCount;
        
        // Atualiza as classes dos valores
        const saldoElement = document.getElementById('saldoAtual');
        saldoElement.classList.remove('soma-positiva', 'soma-negativa', 'soma-neutra');
        if (saldoAtual > 0) {
            saldoElement.classList.add('soma-positiva');
        } else if (saldoAtual < 0) {
            saldoElement.classList.add('soma-negativa');
        } else {
            saldoElement.classList.add('soma-neutra');
        }
        
        // Aplica a privacidade se estiver ativa
        if (isPrivacidadeAtiva) {
            document.querySelectorAll('.dashboard-valor').forEach(p => {
                p.classList.add('valor-oculto');
            });
        }
    }

    // --- FUNÇÕES DE CONFIGURAÇÃO ---
    
    function resetarDados() {
        const senha = document.getElementById('senhaReset').value;
        
        if (senha !== PASS_RESET) {
            alert('Senha incorreta. Ação cancelada.');
            return;
        }
        
        if (!confirm('ATENÇÃO: Esta ação é IRREVERSÍVEL e apagará TODOS os seus dados.\n\nDeseja realmente continuar?')) {
            return;
        }
        
        if (!confirm('Último aviso: Todos os dados serão perdidos permanentemente.\n\nTem certeza?')) {
            return;
        }
        
        // Limpa todos os dados
        localStorage.removeItem('transacoes');
        localStorage.removeItem('categorias');
        localStorage.removeItem('lojas');
        
        // Recarrega a página
        location.reload();
        
        alert('Todos os dados foram resetados com sucesso!');
    }

    // --- FUNÇÕES DA CALCULADORA ---
    
    function atualizarDisplay() {
        document.getElementById('displayCalc').textContent = displayValue;
    }
    
    function digitoCalc(digito) {
        if (aguardandoSegundoOperando) {
            displayValue = digito;
            aguardandoSegundoOperando = false;
        } else {
            displayValue = displayValue === '0' ? digito : displayValue + digito;
        }
        atualizarDisplay();
    }
    
    function operadorCalc(proximoOperador) {
        const valorDisplay = parseFloat(displayValue.replace(',', '.'));
        
        if (primeiroOperando === null) {
            primeiroOperando = valorDisplay;
        } else if (operadorPendente) {
            const resultado = calcular(primeiroOperando, valorDisplay, operadorPendente);
            displayValue = String(resultado).replace('.', ',');
            primeiroOperando = resultado;
            atualizarDisplay();
        }
        
        aguardandoSegundoOperando = true;
        operadorPendente = proximoOperador;
    }
    
    function calcular(primeiroOperando, segundoOperando, operador) {
        switch (operador) {
            case '+':
                return primeiroOperando + segundoOperando;
            case '-':
                return primeiroOperando - segundoOperando;
            case '*':
                return primeiroOperando * segundoOperando;
            case '/':
                return primeiroOperando / segundoOperando;
            default:
                return segundoOperando;
        }
    }
    
    function igualCalc() {
        const valorDisplay = parseFloat(displayValue.replace(',', '.'));
        
        if (primeiroOperando !== null && operadorPendente) {
            const resultado = calcular(primeiroOperando, valorDisplay, operadorPendente);
            displayValue = String(resultado).replace('.', ',');
            primeiroOperando = null;
            operadorPendente = null;
            aguardandoSegundoOperando = false;
            atualizarDisplay();
        }
    }
    
    function limparCalc() {
        displayValue = '0';
        primeiroOperando = null;
        operadorPendente = null;
        aguardandoSegundoOperando = false;
        atualizarDisplay();
    }
    
    function apagarCalc() {
        if (displayValue.length > 1) {
            displayValue = displayValue.slice(0, -1);
        } else {
            displayValue = '0';
        }
        atualizarDisplay();
    }

    // --- INICIALIZAÇÃO ---
    
    // Quando a página carregar
    window.onload = function() {
        // Inicializa os componentes
        atualizarStatusPadrao();
        carregarCategoriasESubcategorias();
        carregarLojas();
        atualizarDashboard();
        
        // Define a data atual como padrão no campo de data
        const hoje = new Date().toISOString().split('T')[0];
        document.getElementById('dataTransacao').value = hoje;
    };
</script>

</body>
</html>
