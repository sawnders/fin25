<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador Financeiro Pessoal</title>
    <style>
        /* --- ESTILOS GERAIS E LAYOUT --- */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f7f9;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        h1 {
            color: #007bff;
            text-align: center;
            margin-bottom: 20px;
        }
        
        /* --- ESTILOS DE COMPONENTES --- */
        .collapsible-header {
            background-color: #f0f0f0;
            color: #333;
            padding: 15px;
            cursor: pointer;
            border-radius: 6px;
            margin-top: 15px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #ddd;
            transition: background-color 0.2s;
        }
        
        .collapsible-header:hover {
            background-color: #e2e2e2;
        }

        .arrow {
            transition: transform 0.3s ease;
            font-size: 1.2em;
        }

        .collapsible-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease-out;
            padding: 0 15px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-top: none;
            border-radius: 0 0 6px 6px;
            margin-bottom: 20px;
        }
        
        .collapsible-content.expanded {
            padding: 15px;
            border-top: 1px solid #ddd;
        }

        label {
            display: block;
            margin-top: 10px;
            font-weight: 600;
        }

        input[type="date"], 
        input[type="text"], 
        input[type="number"], 
        select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .form-row {
            display: flex;
            gap: 20px;
        }

        .form-row > div {
            flex: 1;
        }
        
        /* --- BOTÕES --- */
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s, opacity 0.2s;
            white-space: nowrap; 
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #0056b3;
        }
        
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background-color: #a71d2a;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: #5a6268;
        }

        .btn-info {
            background-color: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background-color: #0c8a9f;
        }

        .btn-group {
            margin-top: 20px;
            display: flex;
            gap: 10px;
        }
        
        /* --- DASHBOARD --- */
        .dashboard {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .dashboard-item {
            background-color: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            text-align: center;
            border: 1px solid #eee;
        }

        .dashboard-valor {
            font-size: 1.8em;
            font-weight: bold;
            margin: 5px 0 0;
            transition: color 0.3s, background-color 0.3s;
        }

        .soma-positiva {
            color: #28a745;
        }
        
        .soma-negativa {
            color: #dc3545;
        }
        
        .soma-neutra {
             color: #6c757d;
        }

        .dashboard-title {
            font-size: 0.9em;
            color: #666;
        }

        .valor-oculto {
            color: transparent !important;
            background-color: #ccc; 
            border-radius: 4px;
            height: 1.1em;
            display: inline-block; 
            min-width: 100px;
        }
        
        .privacidade-toggle {
            float: right;
            font-size: 1.2em;
            padding: 5px 10px;
        }

        /* --- RELATÓRIO E TABELA --- */
        .relatorio-filtros {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
            align-items: flex-end;
        }

        .relatorio-filtros > div {
            flex-basis: calc(25% - 10px); 
            min-width: 150px;
        }
        
        .relatorio-resumo {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #007bff;
            border-radius: 6px;
            background-color: #e9f5ff;
            display: flex;
            justify-content: space-around;
            font-weight: bold;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
            font-size: 0.9em;
        }

        th {
            background-color: #007bff;
            color: white;
            text-transform: uppercase;
        }
        
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        /* --- STATUS COLORS (CORRIGIDAS) --- */
        .status-vencido {
            background-color: #ffcccc; /* Vermelho claro */
            color: #dc3545; /* Vermelho escuro */
            font-weight: bold;
        }
        
        .status-pendente {
            background-color: #fff3cd; /* Amarelo/Laranja claro */
            color: #856404; /* Amarelo/Laranja escuro */
            font-weight: bold;
        }

        .status-concluido {
            background-color: #d4edda; /* Verde claro */
            color: #155724; /* Verde escuro */
            font-weight: bold;
        }
        /* --- FIM STATUS COLORS --- */


        /* --- MODAL (CONFIGURAÇÕES E DETALHES) --- */
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0;
            top: 0;
            width: 100%; 
            height: 100%; 
            overflow: auto; 
            background-color: rgba(0,0,0,0.4); 
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto; 
            padding: 25px;
            border: 1px solid #888;
            width: 80%; 
            max-width: 700px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            position: relative;
        }

        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-btn:hover,
        .close-btn:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
        
        /* --- ESTILOS DE CATEGORIAS NO MODAL --- */
        .lista-categorias-ul {
            list-style: none;
            padding: 0;
            margin-top: 10px;
        }
        
        .lista-categorias-ul li {
            border-bottom: 1px dashed #eee;
            padding: 8px 0;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        
        .lista-categorias-ul li:last-child {
            border-bottom: none;
        }
        
        /* --- CALCULADORA --- */
        .calculadora {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 5px;
            max-width: 300px;
            margin: 20px auto 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        #displayCalc {
            grid-column: span 4;
            background-color: #222;
            color: white;
            padding: 15px;
            text-align: right;
            font-size: 2em;
            border-radius: 5px;
            margin-bottom: 5px;
            overflow: hidden; 
            white-space: nowrap; 
        }

        .calc-btn {
            padding: 15px;
            font-size: 1.1em;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            background-color: #e9e9e9;
            transition: background-color 0.1s;
        }

        .calc-btn:hover {
            background-color: #d1d1d1;
        }

        .operador {
            background-color: #ff9500;
            color: white;
        }

        .operador:hover {
            background-color: #e08500;
        }

        .clear {
            background-color: #ff3b30;
            color: white;
        }

        .clear:hover {
            background-color: #e02f23;
        }
        
    </style>
</head>
<body>

    <div class="container">
        <h1>Gerenciador Financeiro Pessoal</h1>

        <div class="collapsible-header" onclick="toggleSection('dashboardContent')">
            Dashboard (Resumo) <button id="privacidadeToggle" class="btn btn-secondary privacidade-toggle" onclick="togglePrivacidade(event)">🔒</button> <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="dashboardContent">
            <div class="dashboard">
                <div class="dashboard-item" style="grid-column: span 4; background-color: #e9f5ff; border: 2px solid #007bff;">
                    <div class="dashboard-title">SALDO TOTAL ATUAL (Quitado/Recebido)</div>
                    <p id="saldoAtual" class="dashboard-valor soma-neutra">R$ 0,00</p>
                </div>
            </div>
            
            <div class="dashboard">
                <div class="dashboard-item">
                    <div class="dashboard-title">Receitas Quitadas no Mês</div>
                    <p id="receitasMes" class="dashboard-valor soma-positiva">R$ 0,00</p>
                </div>
                <div class="dashboard-item">
                    <div class="dashboard-title">Despesas Pagas no Mês</div>
                    <p id="despesasMes" class="dashboard-valor soma-negativa">R$ 0,00</p>
                </div>
                <div class="dashboard-item" style="background-color: #ffe6e6;">
                    <div class="dashboard-title">Contas A Pagar</div>
                    <p id="aPagarCount" class="dashboard-valor soma-negativa">0</p>
                </div>
                <div class="dashboard-item" style="background-color: #e6ffe6;">
                    <div class="dashboard-title">Contas A Receber</div>
                    <p id="aReceberCount" class="dashboard-valor soma-positiva">0</p>
                </div>
                <div class="dashboard-item" style="background-color: #fff3cd;">
                    <div class="dashboard-title">Pendente</div>
                    <p id="pendentesCount" class="dashboard-valor soma-neutra">0</p>
                </div>
                 <div class="dashboard-item" style="background-color: #eee;">
                    <div class="dashboard-title">Total de Transações Quitadas</div>
                    <p id="pagosRecebidosCount" class="dashboard-valor soma-neutra">0</p>
                </div>
            </div>
        </div>

        <div class="collapsible-header" onclick="toggleSection('transacaoContent')">
            Nova Transação <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="transacaoContent">
            <div class="form-row">
                <div>
                    <label for="dataTransacao">Data de Vencimento/Competência</label>
                    <input type="date" id="dataTransacao" required>
                </div>
                <div>
                    <label for="tipoTransacao">Tipo</label>
                    <select id="tipoTransacao" onchange="atualizarStatusPadrao(); carregarCategoriasESubcategorias()">
                        <option value="despesa">Despesa</option>
                        <option value="receita">Receita</option>
                    </select>
                </div>
                <div>
                    <label for="statusTransacao">Status</label>
                    <select id="statusTransacao"></select>
                </div>
            </div>

            <div class="form-row">
                <div>
                    <label for="valorTransacao">Valor Total (R$)</label>
                    <input type="number" id="valorTransacao" step="0.01" min="0.01" required>
                </div>
                <div>
                    <label for="parcelas">Número de Parcelas</label>
                    <input type="number" id="parcelas" min="1" value="1" required>
                </div>
            </div>
            
            <div class="form-row">
                 <div>
                    <label for="categoriaTransacao">Categoria <button class="btn btn-secondary" style="padding: 3px 6px; font-size: 0.8em; margin-left: 5px;" onclick="abrirModalCategorias()">+</button></label>
                    <input type="text" id="categoriaTransacao" list="listaCategorias" onchange="carregarSubcategoriasPorCategoria()" autocomplete="off" required>
                    <datalist id="listaCategorias"></datalist>
                </div>
                <div>
                    <label for="subcategoriaTransacao">Subcategoria (Opcional)</label>
                    <input type="text" id="subcategoriaTransacao" list="listaSubcategorias" autocomplete="off">
                    <datalist id="listaSubcategorias"></datalist>
                </div>
            </div>

            <label for="lojaTransacao">Loja/Origem</label>
            <input type="text" id="lojaTransacao" list="listaLojas" autocomplete="off">
            <datalist id="listaLojas"></datalist>

            <label for="descricaoTransacao">Descrição</label>
            <input type="text" id="descricaoTransacao" required>

            <div class="btn-group">
                <button class="btn btn-primary" onclick="salvarTransacao()">Salvar Transação</button>
                <button class="btn btn-secondary" onclick="limparFormulario()">Limpar</button>
            </div>
        </div>

        <div class="collapsible-header" onclick="toggleSection('relatorioContent')">
            Relatórios e Extrato <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="relatorioContent">
            <h2>Filtros</h2>
            <div class="relatorio-filtros">
                <div>
                    <label for="filtroPeriodo">Período</label>
                    <select id="filtroPeriodo" onchange="toggleDateFilters()">
                        <option value="mes">Mês Atual</option>
                        <option value="3meses">Últimos 3 Meses</option>
                        <option value="6meses">Últimos 6 Meses</option>
                        <option value="1ano">Último Ano</option>
                        <option value="personalizado">Personalizado</option>
                    </select>
                </div>
                <div id="filtroDataPersonalizada" style="display: none;">
                    <label for="dataInicio">De</label>
                    <input type="date" id="dataInicio">
                </div>
                <div id="filtroDataPersonalizada2" style="display: none;">
                    <label for="dataFim">Até</label>
                    <input type="date" id="dataFim">
                </div>
                <div>
                    <label for="filtroTipo">Tipo</label>
                    <select id="filtroTipo">
                        <option value="">Todos</option>
                        <option value="despesa">Despesa</option>
                        <option value="receita">Receita</option>
                    </select>
                </div>
                <div>
                    <label for="filtroCategoria">Categoria</label>
                    <input type="text" id="filtroCategoria" list="listaCategoriasFiltro">
                    <datalist id="listaCategoriasFiltro"></datalist>
                </div>
                <div>
                    <label for="filtroBusca">Busca (Desc/Loja)</label>
                    <input type="text" id="filtroBusca">
                </div>
            </div>
            
            <button class="btn btn-primary" onclick="gerarRelatorio()">Gerar Relatório</button>

            <div class="relatorio-resumo">
                <p>Receitas Quitadas: <span id="somaReceitas" class="soma-positiva">R$ 0,00</span></p>
                <p>Despesas Pagas: <span id="somaDespesas" class="soma-negativa">R$ 0,00</span></p>
                <p>Saldo do Período: <span id="saldoRelatorio" class="soma-neutra">R$ 0,00</span></p>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Descrição</th>
                        <th>Tipo</th>
                        <th>Categoria</th>
                        <th>Subcategoria</th>
                        <th>Valor (R$)</th>
                        <th>Status</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="tabelaRelatorioBody">
                    </tbody>
            </table>
        </div>

        <div class="collapsible-header" onclick="toggleSection('configContent')">
            Configurações e Ajuda <span class="arrow">▼</span>
        </div>
        <div class="collapsible-content" id="configContent">
            <h2>Ferramentas</h2>

            <h3>Calculadora Rápida</h3>
            <div class="calculadora">
                <div id="displayCalc">0</div>
                <button class="calc-btn clear" onclick="limparCalc()">C</button>
                <button class="calc-btn clear" onclick="apagarCalc()">←</button>
                <button class="calc-btn operador" onclick="operadorCalc('/')">÷</button>
                <button class="calc-btn operador" onclick="operadorCalc('*')">x</button>
                <button class="calc-btn" onclick="digitoCalc('7')">7</button>
                <button class="calc-btn" onclick="digitoCalc('8')">8</button>
                <button class="calc-btn" onclick="digitoCalc('9')">9</button>
                <button class="calc-btn operador" onclick="operadorCalc('-')">-</button>
                <button class="calc-btn" onclick="digitoCalc('4')">4</button>
                <button class="calc-btn" onclick="digitoCalc('5')">5</button>
                <button class="calc-btn" onclick="digitoCalc('6')">6</button>
                <button class="calc-btn operador" onclick="operadorCalc('+')">+</button>
                <button class="calc-btn" onclick="digitoCalc('1')">1</button>
                <button class="calc-btn" onclick="digitoCalc('2')">2</button>
                <button class="calc-btn" onclick="digitoCalc('3')">3</button>
                <button class="calc-btn operador" onclick="igualCalc()">=</button>
                <button class="calc-btn" onclick="digitoCalc('0')">0</button>
                <button class="calc-btn" onclick="digitoCalc(',')">,</button>
            </div>
            
            <h3>Resetar Todos os Dados</h3>
            <p><strong>ATENÇÃO:</strong> Esta ação é irreversível e apagará todas as transações, categorias e lojas.</p>
            <input type="password" id="senhaReset" placeholder="Senha de Reset (Padrão: 123456)">
            <button class="btn btn-danger" onclick="resetarDados()">Confirmar Reset</button>
            
        </div>

    </div>

    <div id="modalCategorias" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="fecharModalCategorias()">&times;</span>
            <h2>Gerenciar Categorias</h2>
            
            <div style="display: flex; gap: 20px;">
                <div style="flex: 1;">
                    <h3>Nova Categoria</h3>
                    <label for="modalTipo">Tipo:</label>
                    <select id="modalTipo" style="width: 100%;">
                        <option value="despesa">Despesa</option>
                        <option value="receita">Receita</option>
                    </select>
                    <label for="modalNovaCategoria">Nome da Categoria:</label>
                    <input type="text" id="modalNovaCategoria" placeholder="Ex: Alimentação, Salário">
                    <button class="btn btn-primary" onclick="cadastrarCategoriaModal()">Cadastrar Categoria</button>
                </div>
                
                <div style="flex: 1;">
                    <h3>Nova Subcategoria</h3>
                    <label for="modalSubCategoriaPai">Categoria Pai:</label>
                    <input type="text" id="modalSubCategoriaPai" list="listaCategoriasModal" placeholder="Ex: Alimentação (selecione)">
                    <datalist id="listaCategoriasModal"></datalist>
                    
                    <label for="modalNovaSubcategoria">Nome da Subcategoria:</label>
                    <input type="text" id="modalNovaSubcategoria" placeholder="Ex: Supermercado, Restaurante">
                    <button class="btn btn-primary" onclick="cadastrarSubcategoriaModal()">Cadastrar Subcategoria</button>
                </div>
            </div>

            <hr style="margin-top: 20px;">

            <h3>Categorias Existentes (Clique em X para Excluir)</h3>
            <div id="categoriasDisplay">
                </div>
        </div>
    </div>

    <div id="modalDetalhesTransacao" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="fecharModalDetalhes()">&times;</span>
            <h2>Detalhes da Transação Original</h2>
            <div id="detalhesDisplay">
                </div>
        </div>
    </div>


<script>
    // --- VARIÁVEIS GLOBAIS E CONFIGURAÇÃO ---
    const PASS_RESET = "123456"; // Senha de reset 
    let isPrivacidadeAtiva = true; // Inicia ativado
    // Variáveis da calculadora
    let displayValue = '0';
    let primeiroOperando = null;
    let operadorPendente = null;
    let aguardandoSegundoOperando = false;
    
    // --- UTILS ---
    const formatarMoeda = (valor) => {
        if (!isFinite(valor) || valor === null) {
            return 'R$ 0,00';
        }
        return `R$ ${parseFloat(valor).toFixed(2).replace('.', ',').replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;
    };

    // --- FUNÇÕES DE ARMAZENAMENTO (LOCALSTORAGE) ---
    function getTransacoes() {
        return JSON.parse(localStorage.getItem('transacoes')) || [];
    }

    function setTransacoes(transacoes) {
        localStorage.setItem('transacoes', JSON.stringify(transacoes));
    }
    
    function getCategorias() {
        // Estrutura esperada: { despesa: { 'Categoria X': {nome: 'Cat X', subcategorias: []} }, receita: {...} }
        return JSON.parse(localStorage.getItem('categorias')) || { despesa: {}, receita: {} };
    }

    function setCategorias(categorias) {
        localStorage.setItem('categorias', JSON.stringify(categorias));
    }
    
    function getLojas() {
        return JSON.parse(localStorage.getItem('lojas')) || [];
    }

    function setLojas(lojas) {
        localStorage.setItem('lojas', JSON.stringify(lojas));
    }

    // --- FUNÇÕES DE USABILIDADE ---
    
    function atualizarStatusPadrao() {
        const tipo = document.getElementById('tipoTransacao').value;
        const statusSelect = document.getElementById('statusTransacao');
        
        statusSelect.innerHTML = '';
        
        if (tipo === 'despesa') {
            statusSelect.innerHTML = `
                <option value="A Pagar">A Pagar</option>
                <option value="Pendente">Pendente</option>
                <option value="Pago">Pago</option>
            `;
            statusSelect.value = 'A Pagar';
        } else {
            statusSelect.innerHTML = `
                <option value="A Receber">A Receber</option>
                <option value="Pendente">Pendente</option>
                <option value="Recebido">Recebido</option>
            `;
            statusSelect.value = 'A Receber';
        }
    }
    
    function toggleSection(contentId) {
        const content = document.getElementById(contentId);
        const header = content.previousElementSibling;
        const arrow = header.querySelector('.arrow');

        const isExpanded = content.classList.contains('expanded');

        // Fechar
        if (isExpanded) {
            content.style.maxHeight = content.scrollHeight + 'px'; // Força a transição a começar do tamanho atual
            setTimeout(() => {
                content.style.maxHeight = '0px';
                content.classList.remove('expanded');
                arrow.style.transform = 'rotate(0deg)';
            }, 10);
        } 
        // Abrir
        else {
            // Fechar outras seções antes de abrir
             document.querySelectorAll('.collapsible-content.expanded').forEach(otherContent => {
                 if(otherContent.id !== contentId) {
                     otherContent.style.maxHeight = '0px';
                     otherContent.classList.remove('expanded');
                     otherContent.previousElementSibling.querySelector('.arrow').style.transform = 'rotate(0deg)';
                 }
             });


            content.classList.add('expanded');
            content.style.maxHeight = content.scrollHeight + 'px'; 
            arrow.style.transform = 'rotate(180deg)';
            
            // Depois da transição, define max-height alto para permitir crescimento do conteúdo
            content.addEventListener('transitionend', function handler() {
                if (content.classList.contains('expanded')) {
                    content.style.maxHeight = '4000px'; 
                }
                content.removeEventListener('transitionend', handler);
            });
        }
    }
    
    function togglePrivacidade(event) {
        event.stopPropagation();
        isPrivacidadeAtiva = !isPrivacidadeAtiva;
        const toggleButton = document.getElementById('privacidadeToggle');
        const dashboardValues = document.querySelectorAll('.dashboard-valor');

        toggleButton.innerHTML = isPrivacidadeAtiva ? '🔒' : '&#x1f441;'; 
        
        dashboardValues.forEach(p => {
            p.classList.toggle('valor-oculto', isPrivacidadeAtiva);
        });
    }

    // --- FUNÇÕES DE CATEGORIAS E LOJAS ---
    
    function carregarLojas() {
        const lojas = getLojas();
        const datalist = document.getElementById('listaLojas');
        datalist.innerHTML = '';
        lojas.sort().forEach(loja => {
            const option = document.createElement('option');
            option.value = loja;
            datalist.appendChild(option);
        });
    }
    
    /**
     * Reescrita: Simplifica o carregamento dos datalists para garantir que o tipo (receita/despesa) seja respeitado.
     */
    function carregarCategoriasESubcategorias() {
        const categorias = getCategorias();
        const tipoSelecionado = document.getElementById('tipoTransacao').value; 
        
        const datalistCatTransacao = document.getElementById('listaCategorias');
        const datalistCatFiltro = document.getElementById('listaCategoriasFiltro');
        const datalistCatModal = document.getElementById('listaCategoriasModal');
        
        datalistCatTransacao.innerHTML = '';
        datalistCatFiltro.innerHTML = '';
        datalistCatModal.innerHTML = '';

        // 1. Carrega categorias do tipo selecionado (para a Nova Transação)
        const categoriasDoTipo = categorias[tipoSelecionado] || {};
        const nomesCategoriasDoTipo = Object.keys(categoriasDoTipo).sort(); 
        
        nomesCategoriasDoTipo.forEach(catName => {
            const option = document.createElement('option');
            option.value = catName;
            datalistCatTransacao.appendChild(option);
        });

        // 2. Carrega TODAS as categorias (para o Filtro de Relatórios E Modal de Cadastro)
        const todasCategorias = new Set();
        for (const tipo in categorias) {
            for (const catName in categorias[tipo]) {
                todasCategorias.add(catName);
            }
        }
        
        // Adiciona as categorias ao datalist de Filtro e ao datalist do Modal Categoria Pai
        Array.from(todasCategorias).sort().forEach(cat => {
            // Datalist de Filtro
            const optionFiltro = document.createElement('option');
            optionFiltro.value = cat;
            datalistCatFiltro.appendChild(optionFiltro);
            
            // Datalist do Modal (Categoria Pai) - para subcategorias
            const optionModal = document.createElement('option');
            optionModal.value = cat;
            datalistCatModal.appendChild(optionModal);
        });
        
        carregarSubcategoriasPorCategoria();
    }

    function carregarSubcategoriasPorCategoria() {
        const categorias = getCategorias();
        const tipo = document.getElementById('tipoTransacao').value;
        const categoriaSelecionada = document.getElementById('categoriaTransacao').value.trim(); 
        const datalistSub = document.getElementById('listaSubcategorias');
        
        datalistSub.innerHTML = '';
        
        // Assegura que estamos pegando a categoria correta para o tipo selecionado
        const categoriaObj = categorias[tipo] && categorias[tipo][categoriaSelecionada];

        if (categoriaObj && categoriaObj.subcategorias) {
            categoriaObj.subcategorias.slice().sort().forEach(sub => {
                const option = document.createElement('option');
                option.value = sub;
                datalistSub.appendChild(option);
            });
        }
    }

    // --- FUNÇÕES DE CRUD DE CATEGORIAS (APENAS NO MODAL) ---

    function abrirModalCategorias() {
        document.getElementById('modalCategorias').style.display = 'block';
        carregarCategoriasESubcategorias(); // Garante que datalists e display do modal estão atualizados
        exibirCategoriasParaGerenciamento(); 
    }

    function fecharModalCategorias() {
        document.getElementById('modalCategorias').style.display = 'none';
        carregarCategoriasESubcategorias(); // Recarrega os datalists da Transação após o gerenciamento
    }
    
    /**
     * Fix 2.0 (Versão Robusta): Garante que a estrutura {nome: ..., subcategorias: []} é salva no tipo correto
     * e adiciona feedback em caso de falha no LocalStorage.
     */
    function cadastrarCategoriaModal() {
        const tipo = document.getElementById('modalTipo').value;
        const categoriaInput = document.getElementById('modalNovaCategoria');
        const categoriaNome = categoriaInput.value.trim();
        
        if (!categoriaNome) {
            alert('Erro: Digite o nome da nova Categoria.');
            return;
        }

        let categorias = getCategorias();
        if (!categorias[tipo]) {
            // Se o tipo (despesa/receita) não existe, crie.
            categorias[tipo] = {};
        }

        // Validação e Cadastro
        try {
            if (!categorias[tipo][categoriaNome]) {
                // Estrutura robusta para salvar a nova categoria
                categorias[tipo][categoriaNome] = { nome: categoriaNome, subcategorias: [] };
                
                // Tenta salvar no LocalStorage
                setCategorias(categorias);
                
                // Verifica se salvou (Busca a categoria recém-cadastrada)
                const categoriasSalvas = getCategorias();
                if (categoriasSalvas[tipo] && categoriasSalvas[tipo][categoriaNome]) {
                    categoriaInput.value = ''; // Limpa o input
                    carregarCategoriasESubcategorias(); 
                    exibirCategoriasParaGerenciamento(); // Atualiza o modal
                    alert(`SUCESSO: Categoria '${categoriaNome}' (${tipo}) cadastrada!`);
                } else {
                    // Falha silenciosa no LocalStorage (muito raro)
                    alert('ERRO CRÍTICO: O cadastro falhou. O navegador pode estar bloqueando o salvamento. Tente limpar o cache.');
                }
            } else {
                 alert(`ATENÇÃO: Categoria '${categoriaNome}' (${tipo}) já existe.`);
            }
        } catch (e) {
            alert(`ERRO INESPERADO: Não foi possível salvar a categoria. Erro: ${e.message}`);
            console.error(e);
        }
    }
    
    /**
     * Fix: Assegura que a Subcategoria é salva na Categoria Pai e no Tipo corretos.
     */
    function cadastrarSubcategoriaModal() {
        const tipo = document.getElementById('modalTipo').value;
        const categoriaNome = document.getElementById('modalSubCategoriaPai').value.trim();
        const subInput = document.getElementById('modalNovaSubcategoria');
        const subNome = subInput.value.trim();

        if (!categoriaNome || !subNome) {
            alert('Erro: Selecione uma Categoria existente (Categoria Pai) e digite o nome da Subcategoria.');
            return;
        }

        let categorias = getCategorias();
        // A categoria pai deve existir no TIPO selecionado no modal
        const categoria = categorias[tipo] && categorias[tipo][categoriaNome];

        if (categoria) {
            if (!categoria.subcategorias.includes(subNome)) {
                categoria.subcategorias.push(subNome);
                categoria.subcategorias.sort(); 
                setCategorias(categorias);
                subInput.value = ''; // Limpa o input
                document.getElementById('modalSubCategoriaPai').value = '';
                exibirCategoriasParaGerenciamento(); // Atualiza o modal
                alert(`SUCESSO: Subcategoria '${subNome}' adicionada à '${categoriaNome}' (${tipo}).`);
            } else {
                 alert(`ATENÇÃO: Subcategoria '${subNome}' já existe em '${categoriaNome}'.`);
            }
        } else {
             alert(`Erro: Categoria Pai '${categoriaNome}' não encontrada para o tipo ${tipo}. Certifique-se de que a categoria existe para o tipo selecionado no campo "Tipo" acima.`);
        }
    }

    function exibirCategoriasParaGerenciamento() {
        const categorias = getCategorias();
        const display = document.getElementById('categoriasDisplay');
        display.innerHTML = '';

        const tipos = { despesa: 'Despesas', receita: 'Receitas' };

        for (const tipo in categorias) {
            const tipoDiv = document.createElement('div');
            tipoDiv.innerHTML = `<h3 style="margin-bottom: 0; color: ${tipo === 'despesa' ? '#dc3545' : '#28a745'}">${tipos[tipo]}</h3>`;
            display.appendChild(tipoDiv);

            const listaCats = categorias[tipo];
            const ul = document.createElement('ul');
            ul.classList.add('lista-categorias-ul');
            
            const nomesCategorias = Object.keys(listaCats).sort();

            nomesCategorias.forEach(catNome => {
                const catObj = listaCats[catNome];
                const li = document.createElement('li');
                
                const subcategoriasOrdenadas = catObj.subcategorias.slice().sort(); 
                
                let subHTML = subcategoriasOrdenadas.map(sub => 
                    `<span style="white-space: nowrap;">${sub} <button class="btn btn-danger" style="padding: 3px 6px; font-size: 0.7em;" onclick="excluirSubcategoria('${catNome}', '${sub}', '${tipo}')">X</button></span>`
                ).join(' | ');
                
                li.innerHTML = `
                    <div style="flex-grow: 1; margin-right: 15px;">
                        <strong>${catNome}</strong>
                        <div style="font-size: 0.9em; margin-top: 5px; color: #555; max-height: 50px; overflow: auto; padding-right: 10px;">${subHTML || 'Nenhuma Subcategoria'}</div>
                    </div>
                    <button class="btn btn-danger" style="flex-shrink: 0;" onclick="excluirCategoria('${catNome}', '${tipo}')">Excluir Categoria</button>
                `;
                ul.appendChild(li);
            });
            
            if (nomesCategorias.length === 0) {
                ul.innerHTML = '<li>Nenhuma categoria cadastrada para este tipo.</li>';
            }
            
            display.appendChild(ul);
        }
    }
    
    function excluirCategoria(nome, tipo) {
        if (confirm(`Tem certeza que deseja excluir a categoria '${nome}' (${tipo}) e todas as suas subcategorias? As transações existentes permanecerão, mas sem categoria associada.`)) {
            const categorias = getCategorias();
            if (categorias[tipo] && categorias[tipo][nome]) {
                 delete categorias[tipo][nome];
                 setCategorias(categorias);
                 exibirCategoriasParaGerenciamento(); // Recarrega a lista do modal
                 carregarCategoriasESubcategorias(); // Atualiza datalists de Transação
                 alert(`Categoria '${nome}' excluída.`);
            }
        }
    }

    function excluirSubcategoria(catNome, subNome, tipo) {
        if (confirm(`Tem certeza que deseja excluir a subcategoria '${subNome}' de '${catNome}'?`)) {
            const categorias = getCategorias();
            const categoria = categorias[tipo] && categorias[tipo][catNome];

            if (categoria) {
                const subcategorias = categoria.subcategorias;
                const index = subcategorias.indexOf(subNome);
                if (index > -1) {
                    subcategorias.splice(index, 1);
                    setCategorias(categorias);
                    exibirCategoriasParaGerenciamento(); // Recarrega a lista do modal
                    carregarCategoriasESubcategorias(); // Atualiza datalists de Transação
                    alert(`Subcategoria '${subNome}' excluída.`);
                }
            }
        }
    }

    // --- FUNÇÕES DE TRANSAÇÃO ---
    
    function salvarTransacao() {
        if (!confirm('Deseja realmente salvar esta(s) transação(ões)?')) {
            return;
        }

        const data = document.getElementById('dataTransacao').value;
        const tipo = document.getElementById('tipoTransacao').value;
        const categoria = document.getElementById('categoriaTransacao').value.trim();
        const subcategoria = document.getElementById('subcategoriaTransacao').value.trim();
        const lojaTransacao = document.getElementById('lojaTransacao').value.trim();
        const descricaoTransacao = document.getElementById('descricaoTransacao').value.trim();
        const valorStr = document.getElementById('valorTransacao').value.replace(',', '.');
        const parcelas = parseInt(document.getElementById('parcelas').value);
        const status = document.getElementById('statusTransacao').value;

        if (!data || !valorStr || !categoria || !tipo || !descricaoTransacao || isNaN(parcelas) || parcelas < 1) {
            alert('Por favor, preencha Data, Valor, Categoria, Tipo, Descrição e Número de Parcelas.');
            return;
        }
        
        const valor = parseFloat(valorStr);

        if (isNaN(valor) || valor <= 0) {
            alert('O valor deve ser um número positivo.');
            return;
        }

        // Validação da Categoria 
        const categoriasExistentes = getCategorias()[tipo];
        if (!categoriasExistentes || !categoriasExistentes[categoria]) {
             alert(`A categoria '${categoria}' não foi encontrada para o tipo ${tipo}. Por favor, use o botão '+' ao lado do campo Categoria para ir em Configurações e cadastrá-la.`);
             return;
        }

        let transacoes = getTransacoes();
        
        // Cadastro implícito de Loja/Estabelecimento
        if(lojaTransacao) {
            let lojas = getLojas();
            if (!lojas.includes(lojaTransacao)) {
                lojas.push(lojaTransacao);
                setLojas(lojas);
            }
        }

        const valorParcela = valor / parcelas;
        const idOriginal = Date.now(); 
        
        // Geração de Parcelas
        for (let i = 0; i < parcelas; i++) {
            const dataInicial = new Date(data + 'T00:00:00');
            const dataParcela = new Date(dataInicial.setMonth(dataInicial.getMonth() + i));

            const novaTransacao = {
                id: idOriginal + i, 
                idOriginal: idOriginal, 
                // data.toISOString().split('T')[0] garante o formato YYYY-MM-DD
                data: dataParcela.toISOString().split('T')[0], 
                nome: lojaTransacao,
                descricao: (parcelas > 1) ? `${lojaTransacao || categoria} (${i + 1}/${parcelas}) - ${descricaoTransacao}` : descricaoTransacao,
                tipo: tipo,
                categoria: categoria,
                subcategoria: subcategoria,
                valor: valorParcela,
                parcelaAtual: i + 1,
                totalParcelas: parcelas,
                status: status 
            };
            transacoes.push(novaTransacao);
        }

        setTransacoes(transacoes);
        limparFormulario();
        atualizarDashboard();
        alert(`Transação de ${formatarMoeda(valor)} (${parcelas}x) salva com sucesso!`);
    }

    function limparFormulario() {
        document.getElementById('dataTransacao').valueAsDate = null;
        document.getElementById('tipoTransacao').value = 'despesa';
        document.getElementById('categoriaTransacao').value = '';
        document.getElementById('subcategoriaTransacao').value = '';
        document.getElementById('lojaTransacao').value = '';
        document.getElementById('descricaoTransacao').value = '';
        document.getElementById('valorTransacao').value = '';
        document.getElementById('parcelas').value = '1';
        atualizarStatusPadrao(); 
        carregarCategoriasESubcategorias();
    }
    
    function excluirTransacao(id) {
        if (!confirm('Tem certeza que deseja excluir esta transação? O valor dela será revertido (devolvido/retirado) do seu Saldo.')) {
            return;
        }
        
        let transacoes = getTransacoes();
        transacoes = transacoes.filter(t => t.id !== id);
        
        setTransacoes(transacoes);
        atualizarDashboard();
        gerarRelatorio(); 
    }

    function alterarStatus(id, novoStatus) {
        let transacoes = getTransacoes();
        const transacaoIndex = transacoes.findIndex(t => t.id === id);
        
        if (transacaoIndex !== -1) {
            transacoes[transacaoIndex].status = novoStatus;
            setTransacoes(transacoes);
            atualizarDashboard();
            gerarRelatorio();
        }
    }

    function abrirModalDetalhes() {
        document.getElementById('modalDetalhesTransacao').style.display = 'block';
    }
    
    function fecharModalDetalhes() {
        document.getElementById('modalDetalhesTransacao').style.display = 'none';
    }

    function detalharTransacaoOriginal(idOriginal) {
        const todasTransacoes = getTransacoes();
        const transacoesDoGrupo = todasTransacoes.filter(t => t.idOriginal === idOriginal);
        
        if (transacoesDoGrupo.length === 0) return;

        const original = transacoesDoGrupo[0];
        const valorTotal = original.valor * original.totalParcelas;
        const detalhesDisplay = document.getElementById('detalhesDisplay');
        
        // Encontrar a descrição original (sem a parte da parcela)
        const descricaoBase = original.descricao.replace(/\s\(\d+\/\d+\)/, '');

        let html = `
            <p><strong>Tipo:</strong> <span style="font-weight: bold; color: ${original.tipo === 'receita' ? '#28a745' : '#dc3545'};">${original.tipo.toUpperCase()}</span></p>
            <p><strong>Descrição:</strong> ${descricaoBase}</p>
            <p><strong>Loja/Origem:</strong> ${original.nome || 'N/A'}</p>
            <p><strong>Categoria:</strong> ${original.categoria} / ${original.subcategoria || '-'}</p>
            <p><strong>Valor Total:</strong> <strong>${formatarMoeda(valorTotal)}</strong></p>
            <p><strong>Parcelas:</strong> ${original.totalParcelas}</p>
            <p><strong>Valor/Parcela:</strong> ${formatarMoeda(original.valor)}</p>
            
            <h3>Status das Parcelas</h3>
            <ul id="parcelasList" style="list-style-type: none; padding-left: 0;">
        `;

        transacoesDoGrupo.sort((a, b) => new Date(a.data) - new Date(b.data)).forEach(p => {
            const dataVencimento = new Date(p.data + 'T00:00:00');
            const hoje = new Date();
            hoje.setHours(0, 0, 0, 0); 
            
            const isVencida = dataVencimento < hoje && p.status !== 'Pago' && p.status !== 'Recebido';

            let statusDisplay = p.status;
            let statusColor = '#6c757d'; // Neutro
            
            if (isVencida) {
                statusDisplay = 'VENCIDO/ATRASADO';
                statusColor = '#dc3545';
            } else if (p.status === 'Pendente') {
                statusColor = '#ffc107'; 
            } else if (p.status === 'Pago' || p.status === 'Recebido') {
                statusColor = '#28a745';
            }
            
            html += `
                <li style="border-bottom: 1px dotted #eee; padding: 5px 0;">
                    ${p.parcelaAtual}/${p.totalParcelas} | Vencimento: ${p.data} | Valor: ${formatarMoeda(p.valor)} | 
                    Status: <strong style="color: ${statusColor};">${statusDisplay}</strong>
                </li>
            `;
        });

        html += `</ul>`;
        
        detalhesDisplay.innerHTML = html;
        abrirModalDetalhes();
    }


    // --- FUNÇÕES DE DASHBOARD ---
    
    function atualizarDashboard() {
        const transacoes = getTransacoes();
        const hoje = new Date();
        hoje.setHours(0, 0, 0, 0); 
        const mesAtual = hoje.getMonth();
        const anoAtual = hoje.getFullYear();
        
        let saldoAtual = 0;
        let receitasMes = 0;
        let despesasMes = 0;
        let aPagarCount = 0;
        let aReceberCount = 0;
        let pendentesCount = 0;
        let pagosRecebidosCount = 0;
        
        transacoes.forEach(t => {
            const dataTransacao = new Date(t.data + 'T00:00:00');
            
            // CÁLCULO DO SALDO ATUAL (Só contas quitadas)
            if (t.status === 'Recebido') {
                saldoAtual += t.valor;
            } else if (t.status === 'Pago') {
                saldoAtual -= t.valor;
            }

            // CÁLCULO DE RECEITAS/DESPESAS NO MÊS (Quitadas no mês de competência)
            if (dataTransacao.getMonth() === mesAtual && dataTransacao.getFullYear() === anoAtual) {
                if (t.status === 'Recebido') {
                    receitasMes += t.valor;
                } else if (t.status === 'Pago') {
                    despesasMes += t.valor;
                }
            }
            
            // CONTAGEM POR STATUS
            if (t.status === 'A Pagar') {
                aPagarCount++;
            } else if (t.status === 'A Receber') {
                aReceberCount++;
            } else if (t.status === 'Pendente') {
                pendentesCount++;
            } else if (t.status === 'Pago' || t.status === 'Recebido') {
                pagosRecebidosCount++;
            }
        });

        document.getElementById('saldoAtual').textContent = formatarMoeda(saldoAtual);
        document.getElementById('receitasMes').textContent = formatarMoeda(receitasMes);
        document.getElementById('despesasMes').textContent = formatarMoeda(despesasMes);
        document.getElementById('aPagarCount').textContent = aPagarCount;
        document.getElementById('aReceberCount').textContent = aReceberCount;
        document.getElementById('pendentesCount').textContent = pendentesCount;
        document.getElementById('pagosRecebidosCount').textContent = pagosRecebidosCount;

        // Atualiza a classe de cor do saldo
        const saldoElement = document.getElementById('saldoAtual');
        saldoElement.classList.remove('soma-positiva', 'soma-negativa', 'soma-neutra');
        if (saldoAtual > 0) {
            saldoElement.classList.add('soma-positiva');
        } else if (saldoAtual < 0) {
            saldoElement.classList.add('soma-negativa');
        } else {
             saldoElement.classList.add('soma-neutra');
        }

        if(isPrivacidadeAtiva) {
            document.querySelectorAll('.dashboard-valor').forEach(p => p.classList.add('valor-oculto'));
        } else {
            document.querySelectorAll('.dashboard-valor').forEach(p => p.classList.remove('valor-oculto'));
        }

        carregarLojas();
        carregarCategoriasESubcategorias();
    }


    // --- FUNÇÕES DE RELATÓRIO ---
    
    function toggleDateFilters() {
        const periodo = document.getElementById('filtroPeriodo').value;
        const dataInicioDiv = document.getElementById('filtroDataPersonalizada');
        const dataFimDiv = document.getElementById('filtroDataPersonalizada2');

        if (periodo === 'personalizado') {
            dataInicioDiv.style.display = 'block';
            dataFimDiv.style.display = 'block';
        } else {
            dataInicioDiv.style.display = 'none';
            dataFimDiv.style.display = 'none';
            // Limpa as datas personalizadas para evitar conflito se mudar o filtro
            document.getElementById('dataInicio').valueAsDate = null;
            document.getElementById('dataFim').valueAsDate = null;
        }
    }
    
    function aplicarFiltroDePeriodo(periodo, dataInicioStr, dataFimStr) {
        const dataAtual = new Date();
        dataAtual.setHours(0, 0, 0, 0); 
        let inicio = null;
        let fim = null;

        if (periodo === 'mes') {
            inicio = new Date(dataAtual.getFullYear(), dataAtual.getMonth(), 1);
            fim = new Date(dataAtual.getFullYear(), dataAtual.getMonth() + 1, 0); 
        } else if (periodo === '3meses') {
            inicio = new Date(dataAtual.getFullYear(), dataAtual.getMonth() - 2, 1);
            fim = new Date(dataAtual.getFullYear(), dataAtual.getMonth() + 1, 0);
        } else if (periodo === '6meses') {
            inicio = new Date(dataAtual.getFullYear(), dataAtual.getMonth() - 5, 1);
            fim = new Date(dataAtual.getFullYear(), dataAtual.getMonth() + 1, 0);
        } else if (periodo === '1ano') {
            inicio = new Date(dataAtual.getFullYear() - 1, dataAtual.getMonth(), dataAtual.getDate());
            inicio.setHours(0, 0, 0, 0);
            // Fim é o final do dia atual
            fim = new Date(dataAtual); 
        } else if (periodo === 'personalizado') {
            inicio = dataInicioStr ? new Date(dataInicioStr + 'T00:00:00') : null;
            fim = dataFimStr ? new Date(dataFimStr + 'T00:00:00') : null;
        }

        // Se o período não for personalizado, define as datas nos inputs
        if (periodo !== 'personalizado') {
            document.getElementById('dataInicio').valueAsDate = inicio;
            // O input de data usa a data do dia anterior se for 0, então usamos a data de fim do mês, não o primeiro dia do próximo
            if (fim) {
                document.getElementById('dataFim').value = fim.toISOString().split('T')[0];
            }
        }
        
        return { inicio, fim };
    }


    function gerarRelatorio() {
        const transacoes = getTransacoes();
        const filtroPeriodo = document.getElementById('filtroPeriodo').value;
        const dataInicioStr = document.getElementById('dataInicio').value;
        const dataFimStr = document.getElementById('dataFim').value;
        const filtroTipo = document.getElementById('filtroTipo').value;
        const filtroCategoria = document.getElementById('filtroCategoria').value.toLowerCase();
        const filtroBusca = document.getElementById('filtroBusca').value.toLowerCase();
        const tabelaBody = document.querySelector('#tabelaRelatorioBody');
        tabelaBody.innerHTML = '';
        
        let somaReceitas = 0;
        let somaDespesas = 0;

        const hoje = new Date();
        hoje.setHours(0, 0, 0, 0); 
        
        // Aplica o filtro de período para obter as datas limite
        const { inicio: dataLimiteInicio, fim: dataLimiteFim } = aplicarFiltroDePeriodo(filtroPeriodo, dataInicioStr, dataFimStr);

        const transacoesFiltradas = transacoes.filter(transacao => {
            const transacaoDate = new Date(transacao.data + 'T00:00:00');
            
            // Filtro de Período
            let matchPeriodo = true;
            if (dataLimiteInicio) {
                matchPeriodo = transacaoDate >= dataLimiteInicio;
            }
            if (dataLimiteFim) {
                // Para incluir o dia final (dataLimiteFim), comparamos com o dia seguinte
                let dataFimInclusiva = new Date(dataLimiteFim);
                dataFimInclusiva.setDate(dataFimInclusiva.getDate() + 1); 
                matchPeriodo = matchPeriodo && (transacaoDate < dataFimInclusiva);
            }

            // Outros Filtros
            const matchTipo = !filtroTipo || transacao.tipo === filtroTipo;
            const matchCategoria = !filtroCategoria || (transacao.categoria && transacao.categoria.toLowerCase().includes(filtroCategoria));
            const matchBusca = !filtroBusca || 
                               (transacao.descricao && transacao.descricao.toLowerCase().includes(filtroBusca)) || 
                               (transacao.nome && transacao.nome.toLowerCase().includes(filtroBusca));

            return matchPeriodo && matchTipo && matchCategoria && matchBusca;
        });

        transacoesFiltradas.sort((a, b) => new Date(a.data) - new Date(b.data));

        transacoesFiltradas.forEach(transacao => {
            
            // LÓGICA DE SOMA (Apenas Pagos/Recebidos no Período Filtrado)
            if (transacao.status === 'Recebido') {
                somaReceitas += transacao.valor;
            } else if (transacao.status === 'Pago') {
                somaDespesas += transacao.valor;
            }

            const newRow = tabelaBody.insertRow();
            
            // LÓGICA DE CORES E STATUS (ATUALIZADA)
            const transacaoDate = new Date(transacao.data + 'T00:00:00');
            let statusDisplay = transacao.status;
            let statusClass = '';
            
            const isVencida = transacaoDate < hoje && transacao.status !== 'Pago' && transacao.status !== 'Recebido';

            if (isVencida) {
                statusDisplay = 'VENCIDO/ATRASADO';
                statusClass = 'status-vencido';
            } else if (transacao.status === 'Pendente') {
                statusClass = 'status-pendente';
            } else if (transacao.status === 'Pago' || transacao.status === 'Recebido') {
                 // Novo status de conclusão com cor verde
                statusClass = 'status-concluido'; 
            }
            
            newRow.insertCell(0).textContent = transacao.data;
            newRow.insertCell(1).textContent = transacao.descricao;
            newRow.insertCell(2).textContent = transacao.tipo;
            newRow.insertCell(3).textContent = transacao.categoria;
            newRow.insertCell(4).textContent = transacao.subcategoria || '-';
            
            // Valor com cor
            const valorCell = newRow.insertCell(5);
            valorCell.textContent = formatarMoeda(transacao.valor);
            valorCell.style.color = transacao.tipo === 'receita' ? '#28a745' : '#dc3545';
            valorCell.style.fontWeight = 'bold';
            
            const statusCell = newRow.insertCell(6);
            statusCell.textContent = statusDisplay;
            if (statusClass) {
                statusCell.classList.add(statusClass);
            }

            const acoesCell = newRow.insertCell(7);
            acoesCell.style.display = 'flex';
            acoesCell.style.gap = '5px';
            acoesCell.style.alignItems = 'center';
            acoesCell.style.minWidth = '200px';
            
            // Botão Lupa (Detalhe Original)
            if (transacao.totalParcelas > 1 && transacao.parcelaAtual === 1) { 
                const lupaBtn = document.createElement('button');
                lupaBtn.innerHTML = '🔍';
                lupaBtn.classList.add('btn', 'btn-info');
                lupaBtn.onclick = () => detalharTransacaoOriginal(transacao.idOriginal);
                lupaBtn.style.padding = '5px 10px';
                lupaBtn.title = 'Ver detalhes da transação original (todas as parcelas)';
                acoesCell.appendChild(lupaBtn);
            }


            // Dropdown de Status
            const statusSelect = document.createElement('select');
            const options = transacao.tipo === 'despesa' 
                ? ['A Pagar', 'Pendente', 'Pago'] 
                : ['A Receber', 'Pendente', 'Recebido'];
            statusSelect.innerHTML = options.map(status => 
                `<option value="${status}" ${transacao.status === status ? 'selected' : ''}>${status}</option>`
            ).join('');

            statusSelect.onchange = (e) => alterarStatus(transacao.id, e.target.value);
            statusSelect.classList.add('btn', 'btn-secondary');
            statusSelect.style.padding = '5px 8px';
            statusSelect.style.height = '32px';
            
            // Botão de exclusão (X)
            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = 'X';
            deleteBtn.classList.add('btn', 'btn-danger');
            deleteBtn.onclick = () => excluirTransacao(transacao.id);
            deleteBtn.style.padding = '5px 10px';
            deleteBtn.style.height = '32px';

            acoesCell.appendChild(statusSelect);
            acoesCell.appendChild(deleteBtn);
        });

        // Atualiza o resumo do relatório
        document.getElementById('somaReceitas').textContent = formatarMoeda(somaReceitas);
        document.getElementById('somaDespesas').textContent = formatarMoeda(somaDespesas);
        const saldoRelatorio = somaReceitas - somaDespesas;
        document.getElementById('saldoRelatorio').textContent = formatarMoeda(saldoRelatorio);
        
        const saldoElement = document.getElementById('saldoRelatorio');
        saldoElement.classList.remove('soma-positiva', 'soma-negativa', 'soma-neutra');
        if (saldoRelatorio > 0) {
            saldoElement.classList.add('soma-positiva');
        } else if (saldoRelatorio < 0) {
            saldoElement.classList.add('soma-negativa');
        } else {
             saldoElement.classList.add('soma-neutra');
        }
    }


    // --- FUNÇÕES DE CALCULADORA ---
    function digitoCalc(digito) {
        const display = document.getElementById('displayCalc');
        // Prepara o valor para adição (remove a vírgula para lógica interna)
        let internalValue = displayValue.includes(',') ? displayValue.replace(',', '.') : displayValue;
        
        if (aguardandoSegundoOperando) {
            displayValue = digito;
            aguardandoSegundoOperando = false;
            internalValue = displayValue;
        } else {
            if (digito === ',') {
                if (!internalValue.includes('.')) {
                    // Adiciona o ponto para lógica interna
                    displayValue = internalValue + '.'; 
                }
            } else {
                 displayValue = internalValue === '0' ? digito : internalValue + digito;
            }
        }
        // Atualiza o display (substitui ponto por vírgula para visualização)
        display.textContent = displayValue.replace('.', ','); 
    }

    function operadorCalc(proximoOperador) {
        const valorAtual = parseFloat(displayValue.replace(',', '.'));

        if (primeiroOperando === null) {
            primeiroOperando = valorAtual;
        } else if (operadorPendente) {
            const resultado = calcular(primeiroOperando, valorAtual, operadorPendente);
            displayValue = String(resultado);
            primeiroOperando = resultado;
            document.getElementById('displayCalc').textContent = displayValue.replace('.', ',');
        }

        operadorPendente = proximoOperador;
        aguardandoSegundoOperando = true;
    }

    function igualCalc() {
        const valorAtual = parseFloat(displayValue.replace(',', '.'));
        if (primeiroOperando !== null && operadorPendente !== null) {
            const resultado = calcular(primeiroOperando, valorAtual, operadorPendente);
            displayValue = String(resultado);
            document.getElementById('displayCalc').textContent = displayValue.replace('.', ',');
            primeiroOperando = null;
            operadorPendente = null;
            aguardandoSegundoOperando = false;
        }
    }

    function calcular(primeiro, segundo, operador) {
        if (operador === '+') { return primeiro + segundo; }
        if (operador === '-') { return primeiro - segundo; }
        if (operador === '*') { return primeiro * segundo; }
        if (operador === '/') { return segundo === 0 ? 'Erro' : primeiro / segundo; }
        return segundo;
    }

    function limparCalc() {
        displayValue = '0';
        primeiroOperando = null;
        operadorPendente = null;
        aguardandoSegundoOperando = false;
        document.getElementById('displayCalc').textContent = '0';
    }

    function apagarCalc() {
        const display = document.getElementById('displayCalc');
        if (aguardandoSegundoOperando) return; 
        
        let text = display.textContent.replace(',', '.'); // Converte para lógica interna

        if (text.length > 1 && text !== 'Erro') {
            text = text.slice(0, -1);
            displayValue = text;
            display.textContent = text.replace('.', ','); // Converte de volta para visualização
        } else {
            display.textContent = '0';
            displayValue = '0';
        }
    }


    // --- FUNÇÃO DE RESET ---
    function resetarDados() {
        const senha = document.getElementById('senhaReset').value;
        if (senha === PASS_RESET) {
            if (confirm('ATENÇÃO: Isso irá apagar TODOS os seus dados (transações, lojas, categorias). Tem certeza?')) {
                localStorage.removeItem('transacoes');
                localStorage.removeItem('lojas');
                localStorage.removeItem('categorias');
                localStorage.removeItem('subcategorias'); // Limpa a chave desnecessária
                alert('Dados resetados com sucesso! Recarregando...');
                window.location.reload(); 
            }
        } else {
            alert('Senha incorreta!');
        }
    }


    // --- INICIALIZAÇÃO ---
    window.onload = function() {
        // Inicializa o modo Stealth
        isPrivacidadeAtiva = true; 
        document.getElementById('privacidadeToggle').innerHTML = '🔒';
        
        // Configurações de UI
        atualizarStatusPadrao();
        toggleDateFilters(); 

        // Carregamento de Dados
        carregarLojas();
        carregarCategoriasESubcategorias();
        atualizarDashboard(); 
        
        // Expansão da aba Dashboard na inicialização
        document.querySelectorAll('.collapsible-header').forEach(header => {
            const content = header.nextElementSibling;
            const arrow = header.querySelector('.arrow');
            
            if(content.id === 'dashboardContent') {
                content.classList.add('expanded');
                content.style.maxHeight = '4000px'; 
                arrow.style.transform = 'rotate(180deg)';
            } else {
                content.classList.remove('expanded');
                content.style.maxHeight = '0px'; 
                arrow.style.transform = 'rotate(0deg)';
            }
        });
        
    };

</script>
</body>
</html>
